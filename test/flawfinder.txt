Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:77:  [4] (shell) system:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
static void timer_cb(const boost::system::error_code & error, GlobalInfo *g);
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:96:  [4] (shell) system:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
    boost::system::error_code error; /*success*/
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:198:  [4] (shell) system:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
static void timer_cb(const boost::system::error_code & error, GlobalInfo *g)
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:358:  [4] (shell) system:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
    boost::system::error_code ec;
./curl-83.40.2/curl/docs/examples/cookie_interface.c:88:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
#define snprintf _snprintf
./curl-83.40.2/curl/docs/examples/cookie_interface.c:88:  [4] (format) _snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
#define snprintf _snprintf
./curl-83.40.2/curl/docs/examples/curlx.c:407:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(serverurl,"https://%s",hostporturl);
./curl-83.40.2/curl/docs/examples/curlx.c:445:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
  sprintf(contenttype,"Content-type: %s",mimetype);
./curl-83.40.2/curl/docs/examples/evhiperfifo.c:72:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
#define DPRINT(x...) printf(x)
./curl-83.40.2/curl/docs/examples/htmltidy.c:59:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
        printf(tidyAttrName(attr));
./curl-83.40.2/curl/docs/examples/rtsp.c:147:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(sdp_filename, "%s.sdp", s);
./curl-83.40.2/curl/docs/examples/rtsp.c:163:  [4] (buffer) sscanf:
  The scanf() family's %s operation, without a limit specification,
  permits buffer overflows. Specify a limit to %s, or use a different input
  function. 
      sscanf(s, " a = control: %s", control);
./curl-83.40.2/curl/docs/examples/rtsp.c:231:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(uri, "%s", url);
./curl-83.40.2/curl/docs/examples/rtsp.c:241:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(uri, "%s/%s", url, control);
./curl-83.40.2/curl/docs/examples/rtsp.c:245:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(uri, "%s/", url);
./curl-83.40.2/curl/docs/examples/synctime.c:151:  [4] (buffer) sscanf:
  The scanf() family's %s operation, without a limit specification,
  permits buffer overflows. Specify a limit to %s, or use a different input
  function. 
        RetVal = sscanf ((char *)(ptr), "Date: %s %hu %s %hu %hu:%hu:%hu",
./curl-83.40.2/curl/include/curl/mprintf.h:48:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef printf
./curl-83.40.2/curl/include/curl/mprintf.h:49:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef fprintf
./curl-83.40.2/curl/include/curl/mprintf.h:50:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# undef sprintf
./curl-83.40.2/curl/include/curl/mprintf.h:51:  [4] (buffer) vsprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# undef vsprintf
./curl-83.40.2/curl/include/curl/mprintf.h:52:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# undef snprintf
./curl-83.40.2/curl/include/curl/mprintf.h:53:  [4] (format) vprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef vprintf
./curl-83.40.2/curl/include/curl/mprintf.h:54:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef vfprintf
./curl-83.40.2/curl/include/curl/mprintf.h:55:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# undef vsnprintf
./curl-83.40.2/curl/include/curl/mprintf.h:58:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define printf curl_mprintf
./curl-83.40.2/curl/include/curl/mprintf.h:59:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define fprintf curl_mfprintf
./curl-83.40.2/curl/include/curl/mprintf.h:60:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# define sprintf curl_msprintf
./curl-83.40.2/curl/include/curl/mprintf.h:61:  [4] (buffer) vsprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# define vsprintf curl_mvsprintf
./curl-83.40.2/curl/include/curl/mprintf.h:62:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# define snprintf curl_msnprintf
./curl-83.40.2/curl/include/curl/mprintf.h:63:  [4] (format) vprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define vprintf curl_mvprintf
./curl-83.40.2/curl/include/curl/mprintf.h:64:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define vfprintf curl_mvfprintf
./curl-83.40.2/curl/include/curl/mprintf.h:65:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# define vsnprintf curl_mvsnprintf
./curl-83.40.2/curl/lib/curl_ntlm_core.c:694:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  snprintf((char *)ptr + NTLM_HMAC_MD5_LEN, NTLMv2_BLOB_LEN,
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:382:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  snprintf((char *)ntlmbuf, NTLM_BUFSIZE,
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:652:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  size = snprintf((char *)ntlmbuf, NTLM_BUFSIZE,
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:179:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
  if(access(ntlm_auth, X_OK) != 0) {
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:224:  [4] (shell) execl:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
      execl(ntlm_auth, ntlm_auth,
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:231:  [4] (shell) execl:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
      execl(ntlm_auth, ntlm_auth,
./curl-83.40.2/curl/lib/curl_printf.h:32:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef printf
./curl-83.40.2/curl/lib/curl_printf.h:33:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef fprintf
./curl-83.40.2/curl/lib/curl_printf.h:34:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# undef snprintf
./curl-83.40.2/curl/lib/curl_printf.h:35:  [4] (format) vprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef vprintf
./curl-83.40.2/curl/lib/curl_printf.h:36:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef vfprintf
./curl-83.40.2/curl/lib/curl_printf.h:37:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# undef vsnprintf
./curl-83.40.2/curl/lib/curl_printf.h:40:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define printf curl_mprintf
./curl-83.40.2/curl/lib/curl_printf.h:41:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define fprintf curl_mfprintf
./curl-83.40.2/curl/lib/curl_printf.h:42:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# define snprintf curl_msnprintf
./curl-83.40.2/curl/lib/curl_printf.h:43:  [4] (format) vprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define vprintf curl_mvprintf
./curl-83.40.2/curl/lib/curl_printf.h:44:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define vfprintf curl_mvfprintf
./curl-83.40.2/curl/lib/curl_printf.h:45:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# define vsnprintf curl_mvsnprintf
./curl-83.40.2/curl/lib/curl_printf.h:51:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# undef sprintf
./curl-83.40.2/curl/lib/curl_printf.h:52:  [4] (buffer) vsprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# undef vsprintf
./curl-83.40.2/curl/lib/curl_printf.h:53:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# define sprintf sprintf_was_used
./curl-83.40.2/curl/lib/curl_printf.h:54:  [4] (buffer) vsprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# define vsprintf vsprintf_was_used
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1173:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy((char *) message + sizeof(outdata), user_name);
./curl-83.40.2/curl/lib/curlx.h:94:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef printf
./curl-83.40.2/curl/lib/curlx.h:95:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef fprintf
./curl-83.40.2/curl/lib/curlx.h:96:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# undef sprintf
./curl-83.40.2/curl/lib/curlx.h:97:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# undef snprintf
./curl-83.40.2/curl/lib/curlx.h:98:  [4] (format) vprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef vprintf
./curl-83.40.2/curl/lib/curlx.h:99:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# undef vfprintf
./curl-83.40.2/curl/lib/curlx.h:100:  [4] (buffer) vsprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# undef vsprintf
./curl-83.40.2/curl/lib/curlx.h:101:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# undef vsnprintf
./curl-83.40.2/curl/lib/curlx.h:105:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define printf curlx_mprintf
./curl-83.40.2/curl/lib/curlx.h:106:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define fprintf curlx_mfprintf
./curl-83.40.2/curl/lib/curlx.h:107:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# define sprintf curlx_msprintf
./curl-83.40.2/curl/lib/curlx.h:108:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# define snprintf curlx_msnprintf
./curl-83.40.2/curl/lib/curlx.h:109:  [4] (format) vprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define vprintf curlx_mvprintf
./curl-83.40.2/curl/lib/curlx.h:110:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
# define vfprintf curlx_mvfprintf
./curl-83.40.2/curl/lib/curlx.h:111:  [4] (buffer) vsprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
# define vsprintf curlx_mvsprintf
./curl-83.40.2/curl/lib/curlx.h:112:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
# define vsnprintf curlx_mvsnprintf
./curl-83.40.2/curl/lib/formdata.c:878:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  vsnprintf(s, sizeof(s), fmt, ap);
./curl-83.40.2/curl/lib/ftp.c:1042:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
        strcpy(addr, string_ftpport);
./curl-83.40.2/curl/lib/ftp.c:1052:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
      strcpy(addr, string_ftpport);
./curl-83.40.2/curl/lib/ftp.c:4091:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  write_len = vsnprintf(s, SBUF_SIZE-3, fmt, ap);
./curl-83.40.2/curl/lib/inet_ntop.c:70:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(dst, tmp);
./curl-83.40.2/curl/lib/inet_ntop.c:167:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(dst, tmp);
./curl-83.40.2/curl/lib/ldap.c:707:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
  vfprintf (stderr, fmt, args);
./curl-83.40.2/curl/lib/memdebug.c:477:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  nchars = vsnprintf(buf, LOGLINE_BUFSIZE, format, ap);
./curl-83.40.2/curl/lib/mprintf.c:919:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        (sprintf)(work, formatbuf, p->data.dnum);
./curl-83.40.2/curl/lib/progress.c:43:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
    snprintf(r, 9, "%2" CURL_FORMAT_CURL_OFF_T ":%02" CURL_FORMAT_CURL_OFF_T
./curl-83.40.2/curl/lib/progress.c:71:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
    snprintf(max5, 6, "%5" CURL_FORMAT_CURL_OFF_T, bytes);
./curl-83.40.2/curl/lib/security.c:122:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  vsnprintf(print_buffer, sizeof(print_buffer), message, args);
./curl-83.40.2/curl/lib/security.c:402:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(buffer, buf);
./curl-83.40.2/curl/lib/sendf.c:132:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
    vsnprintf(print_buffer, sizeof(print_buffer), fmt, ap);
./curl-83.40.2/curl/lib/sendf.c:149:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  vsnprintf(data->state.buffer, BUFSIZE, fmt, ap);
./curl-83.40.2/curl/lib/smb.c:121:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(p, (str)); \
./curl-83.40.2/curl/lib/smb.c:126:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(p, (str)); \
./curl-83.40.2/curl/lib/smb.c:525:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(msg.bytes, req->path);
./curl-83.40.2/curl/lib/smb.h:167:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
  unsigned int access;
./curl-83.40.2/curl/lib/socks.c:232:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
        strcpy((char*)socksreq + packetsize, hostname);
./curl-83.40.2/curl/lib/socks_gssapi.c:67:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
          strcpy(buf+len, (char*) status_string.value);
./curl-83.40.2/curl/lib/socks_gssapi.c:88:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
          strcpy(buf+len, (char*) status_string.value);
./curl-83.40.2/curl/lib/ssh.c:820:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
            else if(access(sshc->rsa, R_OK) != 0) {
./curl-83.40.2/curl/lib/ssh.c:825:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
              else if(access(sshc->rsa, R_OK) != 0) {
./curl-83.40.2/curl/lib/ssh.c:833:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
            if(sshc->rsa && access(sshc->rsa, R_OK) != 0) {
./curl-83.40.2/curl/lib/ssh.c:836:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
              if(sshc->rsa && access(sshc->rsa, R_OK) != 0) {
./curl-83.40.2/curl/lib/tftp.c:410:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(buf, option);
./curl-83.40.2/curl/lib/tftp.c:499:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
      snprintf(buf, sizeof(buf), "%" CURL_FORMAT_CURL_OFF_T,
./curl-83.40.2/curl/lib/version.c:70:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(ptr, LIBCURL_NAME "/" LIBCURL_VERSION);
./curl-83.40.2/curl/lib/vtls/gskit.c:354:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
          strcpy(ciphers[i].ptr, ctp->gsktoken);
./curl-83.40.2/curl/lib/vtls/gskit.c:404:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
      strcpy(ciphers[CURL_GSKPROTO_SSLV3].ptr,
./curl-83.40.2/curl/packages/OS400/os400sys.c:1129:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(cp, cp2);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1161:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(cp, cp2);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1193:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(cp, cp2);
./curl-83.40.2/curl/src/tool_cb_prg.c:94:  [4] (format) fprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
    fprintf(bar->out, format, line, percent);
./curl-83.40.2/curl/src/tool_dirhie.c:127:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
          strcpy(dirbuildup, tempdir);
./curl-83.40.2/curl/src/tool_dirhie.c:131:  [4] (race) access:
  This usually indicates a security flaw.  If an attacker can change
  anything along the path between the call to access() and the file's actual
  use (e.g., by moving files), the attacker can exploit the race
  condition. Set up the correct permissions (e.g., using setuid()) and try to
  open the file directly. 
      if(access(dirbuildup, F_OK) == -1) {
./curl-83.40.2/curl/src/tool_doswin.c:111:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
  strcpy(new_name, msdosify(file_name));
./curl-83.40.2/curl/src/tool_doswin.c:230:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
    strcpy(file_name, fname);
./curl-83.40.2/curl/src/tool_getparam.c:1187:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
              strcpy(n, enc);
./curl-83.40.2/curl/src/tool_help.c:305:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
  printf(CURL_ID "%s\n", curl_version());
./curl-83.40.2/curl/src/tool_main.c:103:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
    strcpy(fname, env);
./curl-83.40.2/curl/src/tool_msgs.c:50:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
    len = vsnprintf(print_buffer, sizeof(print_buffer), fmt, ap);
./curl-83.40.2/curl/src/tool_msgs.c:91:  [4] (format) vfprintf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
    vfprintf(errors, fmt, ap);
./curl-83.40.2/curl/src/tool_paramhlp.c:79:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
      strcpy(string+stringlen, buffer);
./curl-83.40.2/curl/src/tool_parsecfg.c:355:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
      strcpy(&line[linelen], buf);
./curl-83.40.2/curl/src/tool_setopt.c:532:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
    snprintf(buf, sizeof(buf),
./curl-83.40.2/curl/tests/libtest/first.c:93:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
    strcpy(fname, env);
./curl-83.40.2/curl/tests/libtest/lib1502.c:54:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
  sprintf(redirect, "google.com:%s:%s", libtest_arg2, libtest_arg3);
./curl-83.40.2/curl/tests/libtest/lib1506.c:49:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(dnsentry, "server%d.example.com:%s:%s", i + 1, port, address);
./curl-83.40.2/curl/tests/libtest/lib1506.c:72:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(target_url, "http://server%d.example.com:%s/path/1506%04i",
./curl-83.40.2/curl/tests/libtest/lib1510.c:47:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(dnsentry, "server%d.example.com:%s:%s", i + 1, port, address);
./curl-83.40.2/curl/tests/libtest/lib1510.c:76:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(target_url, "http://server%d.example.com:%s/path/1510%04i",
./curl-83.40.2/curl/tests/libtest/lib1512.c:52:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
  sprintf(dnsentry, "server.example.curl:%s:%s", port, address);
./curl-83.40.2/curl/tests/libtest/lib1512.c:61:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(target_url, "http://server.example.curl:%s/path/1512%04i",
./curl-83.40.2/curl/tests/libtest/lib1900.c:66:  [4] (buffer) fscanf:
  The scanf() family's %s operation, without a limit specification,
  permits buffer overflows. Specify a limit to %s, or use a different input
  function. 
    if(fscanf(f, "%d %s\n", &filetime, buf)) {
./curl-83.40.2/curl/tests/libtest/lib1900.c:73:  [4] (buffer) fscanf:
  The scanf() family's %s operation, without a limit specification,
  permits buffer overflows. Specify a limit to %s, or use a different input
  function. 
    if(fscanf(f, "blacklist_site %s\n", buf)) {
./curl-83.40.2/curl/tests/libtest/lib1900.c:116:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
  sprintf(urlbuf, "%s%s", base_url, urlstring[handlenum]);
./curl-83.40.2/curl/tests/libtest/lib518.c:60:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(msgbuff, "%s", msg);
./curl-83.40.2/curl/tests/libtest/lib518.c:62:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(msgbuff, "%s, errno %d, %s", msg, err, strerror(err));
./curl-83.40.2/curl/tests/libtest/lib518.c:136:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, rl.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:144:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, rl.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:202:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff, fmt, rl.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:210:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff, fmt, rl.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:237:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff2, fmt, rl.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:238:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:239:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "fds needed %s > system limit %s",
./curl-83.40.2/curl/tests/libtest/lib518.c:261:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:289:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff1, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:290:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "unable to allocate an array for %s "
./curl-83.40.2/curl/tests/libtest/lib518.c:300:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
  sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:320:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
  sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:327:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "opening of %s failed", DEV_NULL);
./curl-83.40.2/curl/tests/libtest/lib518.c:348:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:349:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(strbuff, "dup() attempt %s failed", strbuff1);
./curl-83.40.2/curl/tests/libtest/lib518.c:352:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:353:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(strbuff, "fds system limit seems close to %s", strbuff1);
./curl-83.40.2/curl/tests/libtest/lib518.c:358:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff2, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:359:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib518.c:360:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(strbuff, "fds needed %s > system limit %s",
./curl-83.40.2/curl/tests/libtest/lib518.c:378:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
  sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:433:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff1, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib518.c:434:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "stdio fopen() fails with %s fds open()",
./curl-83.40.2/curl/tests/libtest/lib530.c:56:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(target_url, "%s%04i", URL, i + 1);
./curl-83.40.2/curl/tests/libtest/lib537.c:61:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(msgbuff, "%s", msg);
./curl-83.40.2/curl/tests/libtest/lib537.c:63:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(msgbuff, "%s, errno %d, %s", msg, err, strerror(err));
./curl-83.40.2/curl/tests/libtest/lib537.c:137:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, rl.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib537.c:145:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, rl.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:197:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff, fmt, rl.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib537.c:205:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff, fmt, rl.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:235:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:278:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff1, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:279:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "unable to allocate an array for %s "
./curl-83.40.2/curl/tests/libtest/lib537.c:290:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:314:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
  sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:321:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "opening of %s failed", DEV_NULL);
./curl-83.40.2/curl/tests/libtest/lib537.c:342:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib537.c:343:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(strbuff, "dup() attempt %s failed", strbuff1);
./curl-83.40.2/curl/tests/libtest/lib537.c:346:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib537.c:347:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(strbuff, "fds system limit seems close to %s", strbuff1);
./curl-83.40.2/curl/tests/libtest/lib537.c:353:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff1, fmt, num_open.rlim_cur);
./curl-83.40.2/curl/tests/libtest/lib537.c:354:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(strbuff, "closing %s file descriptors", strbuff1);
./curl-83.40.2/curl/tests/libtest/lib537.c:364:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:381:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
  sprintf(strbuff, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:436:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
    sprintf(strbuff1, fmt, num_open.rlim_max);
./curl-83.40.2/curl/tests/libtest/lib537.c:437:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(strbuff, "stdio fopen() fails with %s fds open()",
./curl-83.40.2/curl/tests/libtest/lib539.c:67:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
   newURL = strcat(strcpy(newURL, URL), "./");
./curl-83.40.2/curl/tests/libtest/lib540.c:203:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
  sprintf(buffer, "Host: %s", HOST);
./curl-83.40.2/curl/tests/libtest/lib547.c:57:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
    strcpy(ptr, UPLOADTHIS);
./curl-83.40.2/curl/tests/libtest/lib555.c:56:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
    strcpy(ptr, UPLOADTHIS);
./curl-83.40.2/curl/tests/libtest/libauthretry.c:41:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
  sprintf(full_url, "%s%04d", url, seq);
./curl-83.40.2/curl/tests/libtest/libntlmconnect.c:148:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(full_url, "%s0200", url);
./curl-83.40.2/curl/tests/libtest/libntlmconnect.c:151:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(full_url, "%s0100", url);
./curl-83.40.2/curl/tests/server/fake_ntlm.c:79:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
    sprintf(&outbuf[0], "%s", NOTHING_STR);
./curl-83.40.2/curl/tests/server/fake_ntlm.c:101:  [4] (format) sprintf:
  Potential format string problem. Make format string constant. 
      sprintf(&outbuf[o], HEX_FMT_STR, inbuf[i]);
./curl-83.40.2/curl/tests/server/getpart.c:47:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
#define show(x) printf x
./curl-83.40.2/curl/tests/server/getpart.c:401:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
        strcpy(couter, ptag);
./curl-83.40.2/curl/tests/server/getpart.c:407:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
        strcpy(cmain, ptag);
./curl-83.40.2/curl/tests/server/getpart.c:413:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). 
        strcpy(csub, ptag);
./curl-83.40.2/curl/tests/server/rtspd.c:378:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(logbuf, "Got request: %s %s %s/%d.%d",
./curl-83.40.2/curl/tests/server/rtspd.c:381:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(logbuf, "Got a *HUGE* request %s/%d.%d",
./curl-83.40.2/curl/tests/server/rtspd.c:532:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(logbuf, "Received a CONNECT %s HTTP/%d.%d request",
./curl-83.40.2/curl/tests/server/rtspd.c:942:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(weare, "HTTP/1.1 200 OK\r\nContent-Length: %zu\r\n\r\n%s",
./curl-83.40.2/curl/tests/server/sockfilt.c:1040:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf((char *)buffer, "%s/%hu\n", ipv_inuse, port);
./curl-83.40.2/curl/tests/server/sws.c:494:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(logbuf, "Got request: %s %s HTTP/%d.%d",
./curl-83.40.2/curl/tests/server/sws.c:551:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(logbuf, "Received a CONNECT %s HTTP/%d.%d request",
./curl-83.40.2/curl/tests/server/sws.c:1082:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(weare, "%s", msgbuf);
./curl-83.40.2/curl/tests/server/sws.c:1084:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
        sprintf(weare, "HTTP/1.1 200 OK\r\nContent-Length: %zu\r\n\r\n%s",
./curl-83.40.2/curl/tests/server/sws.c:1106:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(partbuf, "%s%ld", section, req->partno);
./curl-83.40.2/curl/tests/server/sws.c:1108:  [4] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. 
      sprintf(partbuf, "%s", section);
./curl-83.40.2/curl/tests/server/util.c:119:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  vsnprintf(buffer, sizeof(buffer), msg, ap);
./curl-83.40.2/curl/tests/server/util.c:190:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
  snprintf(filename, sizeof(filename), TEST_DATA_PATH, path, testno);
./curl-83.40.2/curl/docs/examples/curlx.c:313:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
        p.pst = getenv(*(++args));
./curl-83.40.2/curl/include/curl/curl.h:1913:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
CURL_EXTERN char *curl_getenv(const char *variable);
./curl-83.40.2/curl/lib/config-dos.h:152:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
#define CURL_CA_BUNDLE  getenv("CURL_CA_BUNDLE")
./curl-83.40.2/curl/lib/curl_gethostname.c:67:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  const char *force_hostname = getenv("CURL_GETHOSTNAME");
./curl-83.40.2/curl/lib/curl_ntlm_core.c:676:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  char *force_timestamp = getenv("CURL_FORCETIME");
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:143:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
    username = getenv("NTLMUSER");
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:145:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
      username = getenv("LOGNAME");
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:147:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
      username = getenv("USER");
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:172:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  ntlm_auth_alloc = curl_getenv("CURL_NTLM_WB_FILE");
./curl-83.40.2/curl/lib/curl_setup.h:642:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
#define CURL_CA_BUNDLE getenv("CURL_CA_BUNDLE")
./curl-83.40.2/curl/lib/curl_sspi.c:115:  [3] (misc) LoadLibrary:
  Ensure that the full path to the library is specified, or current
  directory may be used. Use registry entry or GetWindowsDirectory to find
  library path, if you aren't already. 
      s_hSecDll = LoadLibrary(TEXT("security.dll"));
./curl-83.40.2/curl/lib/curl_sspi.c:117:  [3] (misc) LoadLibrary:
  Ensure that the full path to the library is specified, or current
  directory may be used. Use registry entry or GetWindowsDirectory to find
  library path, if you aren't already. 
      s_hSecDll = LoadLibrary(TEXT("secur32.dll"));
./curl-83.40.2/curl/lib/curl_threads.h:42:  [3] (misc) InitializeCriticalSection:
  Exceptions can be thrown in low-memory situations. Use
  InitializeCriticalSectionAndSpinCount instead. 
#    define Curl_mutex_init(m)   InitializeCriticalSection(m)
./curl-83.40.2/curl/lib/curl_threads.h:46:  [3] (misc) EnterCriticalSection:
  On some versions of Windows, exceptions can be thrown in low-memory
  situations. Use InitializeCriticalSectionAndSpinCount instead. 
#  define Curl_mutex_acquire(m)  EnterCriticalSection(m)
./curl-83.40.2/curl/lib/curlx.h:75:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
#define curlx_getenv curl_getenv
./curl-83.40.2/curl/lib/easy.c:159:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  if(!getenv("CHARSET") && cp > 0) {
./curl-83.40.2/curl/lib/getenv.c:38:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  char *temp = getenv(variable);
./curl-83.40.2/curl/lib/getenv.c:44:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  char *env = getenv(variable);
./curl-83.40.2/curl/lib/getenv.c:50:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
char *curl_getenv(const char *v)
./curl-83.40.2/curl/lib/ldap.c:700:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
    const char *env = getenv("CURL_TRACE");
./curl-83.40.2/curl/lib/netrc.c:74:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
    char *home = curl_getenv("HOME"); /* portable environment reader */
./curl-83.40.2/curl/lib/setup-vms.h:37:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
#define getenv decc_getenv
./curl-83.40.2/curl/lib/setup-vms.h:50:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
#undef getenv
./curl-83.40.2/curl/lib/setup-vms.h:52:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
#define getenv vms_getenv
./curl-83.40.2/curl/lib/ssh.c:809:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
        home = curl_getenv("HOME");
./curl-83.40.2/curl/lib/telnet.c:1337:  [3] (misc) LoadLibrary:
  Ensure that the full path to the library is specified, or current
  directory may be used. Use registry entry or GetWindowsDirectory to find
  library path, if you aren't already. 
  wsock2 = LoadLibrary(TEXT("WS2_32.DLL"));
./curl-83.40.2/curl/lib/url.c:4460:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  no_proxy=curl_getenv("no_proxy");
./curl-83.40.2/curl/lib/url.c:4462:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
    no_proxy=curl_getenv("NO_PROXY");
./curl-83.40.2/curl/lib/url.c:4478:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
    prox=curl_getenv(proxy_env);
./curl-83.40.2/curl/lib/url.c:4495:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
      prox=curl_getenv(proxy_env);
./curl-83.40.2/curl/lib/url.c:4501:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
      proxy = curl_getenv("all_proxy"); /* default proxy to use */
./curl-83.40.2/curl/lib/url.c:4503:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
        proxy=curl_getenv("ALL_PROXY");
./curl-83.40.2/curl/lib/vtls/nss.c:1191:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  cert_dir = getenv("SSL_DIR");
./curl-83.40.2/curl/lib/vtls/vtls.c:191:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  char *force_entropy = getenv("CURL_ENTROPY");
./curl-83.40.2/curl/src/tool_homedir.c:57:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  env = getenv(variable);
./curl-83.40.2/curl/src/tool_main.c:264:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  if(getenv("_IN_NETWARE_BASH_") == NULL)
./curl-83.40.2/curl/src/tool_vms.c:56:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  shell = getenv("SHELL");
./curl-83.40.2/curl/tests/libtest/first.c:87:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  env = curl_getenv("CURL_MEMDEBUG");
./curl-83.40.2/curl/tests/libtest/first.c:101:  [3] (buffer) curl_getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  env = curl_getenv("CURL_MEMLIMIT");
./curl-83.40.2/curl/tests/libtest/sethostname.c:32:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  const char *force_hostname = getenv("CURL_GETHOSTNAME");
./curl-83.40.2/curl/tests/server/fake_ntlm.c:165:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  env = getenv("CURL_NTLM_AUTH_TESTNUM");
./curl-83.40.2/curl/tests/server/fake_ntlm.c:179:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
  env = getenv("CURL_NTLM_AUTH_SRCDIR");
./curl-83.40.2/curl/CMake/CurlTests.c:116:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[8192];
./curl-83.40.2/curl/CMake/CurlTests.c:512:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[1024]; /* big enough to play with */
./curl-83.40.2/curl/CMake/CurlTests.c:526:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[1024]; /* big enough to play with */
./curl-83.40.2/curl/docs/examples/anyauthput.c:130:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd = open(file, O_RDONLY) ;
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:74:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error[CURL_ERROR_SIZE];
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:359:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    tcp_socket->open(boost::asio::ip::tcp::v4(), ec);
./curl-83.40.2/curl/docs/examples/cookie_interface.c:67:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char nline[256];
./curl-83.40.2/curl/docs/examples/curlgtk.c:52:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    outfile = fopen("test.curl", "w");
./curl-83.40.2/curl/docs/examples/curlx.c:149:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(tmp, ia5->data, ia5->length);
./curl-83.40.2/curl/docs/examples/evhiperfifo.c:95:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error[CURL_ERROR_SIZE];
./curl-83.40.2/curl/docs/examples/evhiperfifo.c:360:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char s[1024];
./curl-83.40.2/curl/docs/examples/evhiperfifo.c:400:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0);
./curl-83.40.2/curl/docs/examples/fileupload.c:35:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fd = fopen("debugit", "rb"); /* open file to upload */
./curl-83.40.2/curl/docs/examples/fopen.c:117:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&url->buffer[url->buffer_pos], buffer, size);
./curl-83.40.2/curl/docs/examples/fopen.c:243:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  if((file->handle.file=fopen(url,operation)))
./curl-83.40.2/curl/docs/examples/fopen.c:355:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, file->buffer, want);
./curl-83.40.2/curl/docs/examples/fopen.c:403:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, file->buffer, want);
./curl-83.40.2/curl/docs/examples/fopen.c:455:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[256];
./curl-83.40.2/curl/docs/examples/fopen.c:464:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  outf=fopen("fgets.test","w+");
./curl-83.40.2/curl/docs/examples/fopen.c:488:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  outf=fopen("fread.test","w+");
./curl-83.40.2/curl/docs/examples/fopen.c:512:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  outf=fopen("rewind.test","w+");
./curl-83.40.2/curl/docs/examples/ftp-wildcard.c:118:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    data->output = fopen(finfo->filename, "w");
./curl-83.40.2/curl/docs/examples/ftpget.c:43:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    out->stream=fopen(out->filename, "wb");
./curl-83.40.2/curl/docs/examples/ftpgetresp.c:48:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  ftpfile = fopen("ftp-list", "wb"); /* b is binary, needed on win32 */
./curl-83.40.2/curl/docs/examples/ftpgetresp.c:51:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  respfile = fopen("ftp-responses", "wb"); /* b is binary, needed on win32 */
./curl-83.40.2/curl/docs/examples/ftpsget.c:45:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    out->stream=fopen(out->filename, "wb");
./curl-83.40.2/curl/docs/examples/ftpupload.c:89:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd_src = fopen(LOCAL_FILE, "rb");
./curl-83.40.2/curl/docs/examples/ftpuploadresume.c:91:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  f = fopen(localpath, "rb");
./curl-83.40.2/curl/docs/examples/getinmemory.c:51:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), contents, realsize);
./curl-83.40.2/curl/docs/examples/ghiper.c:84:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error[CURL_ERROR_SIZE];
./curl-83.40.2/curl/docs/examples/ghiper.c:411:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
 socket = open (fifo, O_RDWR | O_NONBLOCK, 0);
./curl-83.40.2/curl/docs/examples/hiperfifo.c:91:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error[CURL_ERROR_SIZE];
./curl-83.40.2/curl/docs/examples/hiperfifo.c:348:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char s[1024];
./curl-83.40.2/curl/docs/examples/hiperfifo.c:385:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  sockfd = open(fifo, O_RDWR | O_NONBLOCK, 0);
./curl-83.40.2/curl/docs/examples/href_extractor.c:42:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    html_parser_char_parse(hsp, ((char *)buffer)[p]);
./curl-83.40.2/curl/docs/examples/href_extractor.c:55:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char tag[1], attr[4], val[128];
./curl-83.40.2/curl/docs/examples/htmltidy.c:81:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char curl_errbuf[CURL_ERROR_SIZE];
./curl-83.40.2/curl/docs/examples/htmltitle.cpp:63:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static char errorBuffer[CURL_ERROR_SIZE];
./curl-83.40.2/curl/docs/examples/http2-download.c:145:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char filename[128];
./curl-83.40.2/curl/docs/examples/http2-download.c:147:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
  sprintf(filename, "dl-%d", num);
./curl-83.40.2/curl/docs/examples/http2-download.c:149:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  out = fopen(filename, "wb");
./curl-83.40.2/curl/docs/examples/http2-download.c:188:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
    num_transfers = atoi(argv[1]);
./curl-83.40.2/curl/docs/examples/http2-upload.c:109:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char timebuf[20];
./curl-83.40.2/curl/docs/examples/http2-upload.c:180:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char url[256];
./curl-83.40.2/curl/docs/examples/http2-upload.c:181:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char filename[128];
./curl-83.40.2/curl/docs/examples/http2-upload.c:185:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
  sprintf(filename, "dl-%d", num);
./curl-83.40.2/curl/docs/examples/http2-upload.c:186:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  out = fopen(filename, "wb");
./curl-83.40.2/curl/docs/examples/http2-upload.c:188:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
  sprintf(url, "https://localhost:8443/upload-%d", num);
./curl-83.40.2/curl/docs/examples/http2-upload.c:194:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  indata[num].in = fopen(upload, "rb");
./curl-83.40.2/curl/docs/examples/http2-upload.c:245:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
    num_transfers = atoi(argv[1]);
./curl-83.40.2/curl/docs/examples/httpput.c:77:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd_src = fopen(file, "rb");
./curl-83.40.2/curl/docs/examples/imap-append.c:68:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/docs/examples/multi-uv.c:79:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char filename[50];
./curl-83.40.2/curl/docs/examples/multi-uv.c:83:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
  sprintf(filename, "%d.download", num);
./curl-83.40.2/curl/docs/examples/multi-uv.c:85:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  file = fopen(filename, "w");
./curl-83.40.2/curl/docs/examples/multithread.c:40:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
const char * const urls[NUMT]= {
./curl-83.40.2/curl/docs/examples/postinmemory.c:45:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), contents, realsize);
./curl-83.40.2/curl/docs/examples/rtsp.c:86:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  FILE *sdp_fp = fopen(sdp_filename, "wt");
./curl-83.40.2/curl/docs/examples/rtsp.c:143:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
  strcpy(sdp_filename, "video.sdp");
./curl-83.40.2/curl/docs/examples/rtsp.c:159:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  FILE *sdp_fp = fopen(sdp_filename, "rt");
./curl-83.40.2/curl/docs/examples/sendrecv.c:118:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buf[1024];
./curl-83.40.2/curl/docs/examples/sepheaders.c:57:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  headerfile = fopen(headerfilename, "wb");
./curl-83.40.2/curl/docs/examples/sepheaders.c:64:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  bodyfile = fopen(bodyfilename, "wb");
./curl-83.40.2/curl/docs/examples/sftpget.c:48:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    out->stream=fopen(out->filename, "wb");
./curl-83.40.2/curl/docs/examples/simplessl.c:70:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  headerfile = fopen("dumpit", "w");
./curl-83.40.2/curl/docs/examples/smooth-gtk-thread.c:88:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      outfile = fopen(urls[j], "w");
./curl-83.40.2/curl/docs/examples/smtp-mail.c:69:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/docs/examples/smtp-multi.c:70:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/docs/examples/smtp-ssl.c:70:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/docs/examples/smtp-tls.c:70:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/docs/examples/synctime.c:99:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char http_proxy[MAX_STRING1];
./curl-83.40.2/curl/docs/examples/synctime.c:100:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char proxy_user[MAX_STRING1];
./curl-83.40.2/curl/docs/examples/synctime.c:101:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char timeserver[MAX_STRING1];
./curl-83.40.2/curl/docs/examples/synctime.c:104:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
const char DefaultTimeServer[3][MAX_STRING1] =
./curl-83.40.2/curl/docs/examples/synctime.c:135:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char  TmpStr1[26], TmpStr2[26];
./curl-83.40.2/curl/docs/examples/synctime.c:207:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    outfile = fopen(OutFileName, "wb");
./curl-83.40.2/curl/docs/examples/synctime.c:261:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char    timeBuf[61];
./curl-83.40.2/curl/docs/examples/synctime.c:262:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char    tzoneBuf[16];
./curl-83.40.2/curl/docs/examples/url2file.c:63:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  pagefile = fopen(pagefilename, "wb");
./curl-83.40.2/curl/docs/examples/xmlstream.c:76:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&(mem->memory[mem->size]), s, len);
./curl-83.40.2/curl/include/curl/curlrules.h:141:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
typedef char
./curl-83.40.2/curl/include/curl/curlrules.h:151:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
typedef char
./curl-83.40.2/curl/include/curl/curlrules.h:161:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
typedef char
./curl-83.40.2/curl/include/curl/curlrules.h:171:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
typedef char
./curl-83.40.2/curl/include/curl/curlrules.h:181:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
typedef char
./curl-83.40.2/curl/lib/asyn-ares.c:670:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char a6[INET6_ADDRSTRLEN];
./curl-83.40.2/curl/lib/asyn-thread.c:271:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char service[12];
./curl-83.40.2/curl/lib/asyn-thread.c:598:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char sbuf[12];
./curl-83.40.2/curl/lib/base64.c:177:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char ibuf[3];
./curl-83.40.2/curl/lib/base64.c:178:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char obuf[4];
./curl-83.40.2/curl/lib/connect.c:269:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char myhost[256] = "";
./curl-83.40.2/curl/lib/connect.c:393:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
            si6->sin6_scope_id = atoi(scope_ptr);
./curl-83.40.2/curl/lib/connect.c:601:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(conn->data->info.conn_primary_ip, conn->primary_ip, MAX_IPADR_LEN);
./curl-83.40.2/curl/lib/connect.c:602:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(conn->data->info.conn_local_ip, conn->local_ip, MAX_IPADR_LEN);
./curl-83.40.2/curl/lib/connect.c:698:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(conn->ip_addr_str, conn->primary_ip, MAX_IPADR_LEN);
./curl-83.40.2/curl/lib/connect.c:824:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
        char ipaddress[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/connect.c:999:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char ipaddress[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/connect.c:1323:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&addr->sa_addr, ai->ai_addr, addr->addrlen);
./curl-83.40.2/curl/lib/content_encoding.c:357:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(z->next_in, k->str, z->avail_in);
./curl-83.40.2/curl/lib/content_encoding.c:383:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(z->next_in + z->avail_in - nread, k->str, nread);
./curl-83.40.2/curl/lib/cookie.c:375:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char name[MAX_NAME];
./curl-83.40.2/curl/lib/cookie.c:619:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(co->path, path, pathlen);
./curl-83.40.2/curl/lib/cookie.c:917:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    fp = file?fopen(file, FOPEN_READTEXT):NULL;
./curl-83.40.2/curl/lib/cookie.c:1051:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
            memcpy(newco, co, sizeof(struct Cookie));
./curl-83.40.2/curl/lib/cookie.c:1265:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    out = fopen(dumphere, FOPEN_WRITETEXT);
./curl-83.40.2/curl/lib/curl_addrinfo.c:172:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ca->ai_addr, ai->ai_addr, ss_size);
./curl-83.40.2/curl/lib/curl_addrinfo.c:333:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&addr->sin_addr, curr, sizeof(struct in_addr));
./curl-83.40.2/curl/lib/curl_addrinfo.c:342:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&addr6->sin6_addr, curr, sizeof(struct in6_addr));
./curl-83.40.2/curl/lib/curl_addrinfo.c:369:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char *h_addr_list[2];
./curl-83.40.2/curl/lib/curl_addrinfo.c:416:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(addrentry, inaddr, sizeof(struct in_addr));
./curl-83.40.2/curl/lib/curl_addrinfo.c:422:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(addrentry, inaddr, sizeof(struct in6_addr));
./curl-83.40.2/curl/lib/curl_addrinfo.c:506:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(sa_un->sun_path, path, path_len + 1); /* copy NUL byte */
./curl-83.40.2/curl/lib/curl_fnmatch.c:72:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char keyword[KEYLEN] = { 0 };
./curl-83.40.2/curl/lib/curl_fnmatch.c:314:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char charset[CURLFNM_CHSET_SIZE] = { 0 };
./curl-83.40.2/curl/lib/curl_gssapi.c:97:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[1024];
./curl-83.40.2/curl/lib/curl_multibyte.c:43:  [2] (buffer) MultiByteToWideChar:
  Requires maximum length in CHARACTERS, not bytes. 
    int str_w_len = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS,
./curl-83.40.2/curl/lib/curl_multibyte.c:48:  [2] (buffer) MultiByteToWideChar:
  Requires maximum length in CHARACTERS, not bytes. 
        if(MultiByteToWideChar(CP_UTF8, 0, str_utf8, -1, str_w,
./curl-83.40.2/curl/lib/curl_ntlm_core.c:164:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char key[8];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:184:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char key[8];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:208:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char key[8];                                /* expanded 64 bit key */
./curl-83.40.2/curl/lib/curl_ntlm_core.c:266:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char key[8];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:289:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char key[8];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:318:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char key[8];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:347:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(out, in, 8);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:424:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char pw[14];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:549:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy (ntbuffer, gcry_md_read (MD4pw, 0), MD4_DIGEST_LENGTH);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:666:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char hmac_output[NTLM_HMAC_MD5_LEN];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:700:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr + 32, challenge_client, 8);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:701:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr + 44, ntlm->target_info, ntlm->target_info_len);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:704:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr + 8, &ntlm->nonce[0], 8);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:713:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr, hmac_output, NTLM_HMAC_MD5_LEN);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:741:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char data[16];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:742:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char hmac_output[16];
./curl-83.40.2/curl/lib/curl_ntlm_core.c:745:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&data[0], challenge_server, 8);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:746:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&data[8], challenge_client, 8);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:753:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(lmresp, hmac_output, 16);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:754:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(lmresp+16, challenge_client, 8);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:188:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(ntlm->target_info, &buffer[target_info_offset], target_info_len);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:289:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ntlm->nonce, &type2[24], 8);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:363:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char ntlmbuf[NTLM_BUFSIZE];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:489:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char ntlmbuf[NTLM_BUFSIZE];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:491:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char lmresp[24]; /* fixed-size */
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:495:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char ntresp[24]; /* fixed-size */
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:500:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char host[HOSTNAME_MAX + 1] = "";
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:537:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char ntbuffer[0x18];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:539:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char ntlmv2hash[0x18];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:575:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char ntbuffer[0x18];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:576:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char tmp[0x18];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:577:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char md5sum[MD5_DIGEST_LENGTH];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:585:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(lmresp, entropy, 8);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:591:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(tmp, &ntlm->nonce[0], 8);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:592:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(tmp + 8, entropy, 8);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:612:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char ntbuffer[0x18];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:614:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char lmbuffer[0x18];
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:740:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], lmresp, 0x18);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:752:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], ptr_ntresp, ntresplen);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:783:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], domain, domlen);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:791:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], user, userlen);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:799:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ntlmbuf[size], host, hostlen);
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:124:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char pwbuf[1024];
./curl-83.40.2/curl/lib/curl_sasl.c:320:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(plainauth, userp, ulen);
./curl-83.40.2/curl/lib/curl_sasl.c:322:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(plainauth + ulen + 1, userp, ulen);
./curl-83.40.2/curl/lib/curl_sasl.c:324:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(plainauth + 2 * ulen + 2, passwdp, plen);
./curl-83.40.2/curl/lib/curl_sasl.c:453:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char digest[MD5_DIGEST_LEN];
./curl-83.40.2/curl/lib/curl_sasl.c:593:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char digest[MD5_DIGEST_LEN];
./curl-83.40.2/curl/lib/curl_sasl.c:594:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char HA1_hex[2 * MD5_DIGEST_LEN + 1];
./curl-83.40.2/curl/lib/curl_sasl.c:595:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char HA2_hex[2 * MD5_DIGEST_LEN + 1];
./curl-83.40.2/curl/lib/curl_sasl.c:596:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char resp_hash_hex[2 * MD5_DIGEST_LEN + 1];
./curl-83.40.2/curl/lib/curl_sasl.c:597:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char nonce[64];
./curl-83.40.2/curl/lib/curl_sasl.c:598:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char realm[128];
./curl-83.40.2/curl/lib/curl_sasl.c:599:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char algorithm[64];
./curl-83.40.2/curl/lib/curl_sasl.c:600:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char qop_options[64];
./curl-83.40.2/curl/lib/curl_sasl.c:602:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char cnonce[33];
./curl-83.40.2/curl/lib/curl_sasl.c:773:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char value[DIGEST_MAX_VALUE_LENGTH];
./curl-83.40.2/curl/lib/curl_sasl.c:774:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char content[DIGEST_MAX_CONTENT_LENGTH];
./curl-83.40.2/curl/lib/curl_sasl.c:906:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char md5buf[16]; /* 16 bytes/128 bits */
./curl-83.40.2/curl/lib/curl_sasl.c:907:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char request_digest[33];
./curl-83.40.2/curl/lib/curl_sasl.c:909:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char ha1[33];/* 32 digits and 1 zero byte */
./curl-83.40.2/curl/lib/curl_sasl.c:910:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char ha2[33];/* 32 digits and 1 zero byte */
./curl-83.40.2/curl/lib/curl_sasl.c:911:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char cnoncebuf[33];
./curl-83.40.2/curl/lib/curl_sasl_gssapi.c:290:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&indata, output_token.value, 4);
./curl-83.40.2/curl/lib/curl_sasl_gssapi.c:328:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(message, &outdata, sizeof(outdata));
./curl-83.40.2/curl/lib/curl_sasl_gssapi.c:329:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(message + sizeof(outdata), username_token.value,
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:299:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char value[DIGEST_MAX_VALUE_LENGTH];
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:300:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char content[DIGEST_MAX_CONTENT_LENGTH];
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:521:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(resp, resp_buf.pvBuffer, resp_buf.cbBuffer);
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:995:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(krb5->context, &context, sizeof(context));
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1122:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&indata, input_buf[1].pvBuffer, 4);
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1172:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(message, &outdata, sizeof(outdata));
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1223:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(appdata, wrap_buf[0].pvBuffer, wrap_buf[0].cbBuffer);
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1225:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(appdata + offset, wrap_buf[1].pvBuffer, wrap_buf[1].cbBuffer);
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1227:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(appdata + offset, wrap_buf[2].pvBuffer, wrap_buf[2].cbBuffer);
./curl-83.40.2/curl/lib/dotdot.c:165:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(outptr, &input[oindex], qlen+1); /* include the ending zero byte */
./curl-83.40.2/curl/lib/easy.c:156:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[60];
./curl-83.40.2/curl/lib/escape.c:163:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char hexstr[3];
./curl-83.40.2/curl/lib/file.c:76:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
#  define open_readonly(p,f) open((p),(f),(0))
./curl-83.40.2/curl/lib/file.c:78:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
#  define open_readonly(p,f) open((p),(f))
./curl-83.40.2/curl/lib/file.c:337:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fd = open(file->path, mode, conn->data->set.new_file_perms);
./curl-83.40.2/curl/lib/formdata.c:754:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[8192];
./curl-83.40.2/curl/lib/formdata.c:759:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  file = fopen(name, "r"); /* VMS */
./curl-83.40.2/curl/lib/formdata.c:829:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(newform->line, line, length);
./curl-83.40.2/curl/lib/formdata.c:875:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char s[4096];
./curl-83.40.2/curl/lib/formdata.c:927:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buffer[8192];
./curl-83.40.2/curl/lib/formdata.c:1259:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
          stdin:fopen(file->contents, "rb"); /* binary read for win32  */
./curl-83.40.2/curl/lib/formdata.c:1281:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
            char buffer[512];
./curl-83.40.2/curl/lib/formdata.c:1367:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
# define fopen_read fopen
./curl-83.40.2/curl/lib/formdata.c:1388:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    return fopen(file, "r"); /* VMS */
./curl-83.40.2/curl/lib/formdata.c:1391:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    return fopen(file, "r", "rfm=stmlf", "ctx=stm");
./curl-83.40.2/curl/lib/formdata.c:1468:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(buffer + gotsize , form->data->line + form->sent,
./curl-83.40.2/curl/lib/formdata.c:1476:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buffer+gotsize,
./curl-83.40.2/curl/lib/ftp.c:974:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char myhost[256] = "";
./curl-83.40.2/curl/lib/ftp.c:979:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char hbuf[NI_MAXHOST];
./curl-83.40.2/curl/lib/ftp.c:985:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char tmp[1024];
./curl-83.40.2/curl/lib/ftp.c:1162:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(sa, ai->ai_addr, ai->ai_addrlen);
./curl-83.40.2/curl/lib/ftp.c:1945:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char separator[4];
./curl-83.40.2/curl/lib/ftp.c:2403:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buffer[24]= { "Accept-ranges: bytes\r\n" };
./curl-83.40.2/curl/lib/ftp.c:3560:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[256];
./curl-83.40.2/curl/lib/ftp.c:4081:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char s[SBUF_SIZE];
./curl-83.40.2/curl/lib/ftp.c:4094:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
  strcpy(&s[write_len], "\r\n"); /* append a trailing CRLF */
./curl-83.40.2/curl/lib/getenv.c:37:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char env[MAX_PATH]; /* MAX_PATH is from windef.h */
./curl-83.40.2/curl/lib/hash.c:101:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(dupkey, key, key_len);
./curl-83.40.2/curl/lib/hostip.c:776:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char hostname[256];
./curl-83.40.2/curl/lib/hostip.c:777:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char address[256];
./curl-83.40.2/curl/lib/hostip4.c:140:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char sbuf[12];
./curl-83.40.2/curl/lib/hostip6.c:137:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char  buf[INET6_ADDRSTRLEN];
./curl-83.40.2/curl/lib/hostip6.c:168:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char sbuf[12];
./curl-83.40.2/curl/lib/hostip6.c:170:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char addrbuf[128];
./curl-83.40.2/curl/lib/http.c:281:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(value, start, len);
./curl-83.40.2/curl/lib/http.c:1012:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buffer, http->postdata, (size_t)http->postsize);
./curl-83.40.2/curl/lib/http.c:1032:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(buffer, http->postdata, fullsize);
./curl-83.40.2/curl/lib/http.c:1126:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(conn->data->state.uploadbuffer, ptr, sendsize);
./curl-83.40.2/curl/lib/http.c:1283:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&in->buffer[in->size_used], inptr, size);
./curl-83.40.2/curl/lib/http.c:1759:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char ftp_typecode[sizeof("/;type=?")] = "";
./curl-83.40.2/curl/lib/http.c:2062:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(newurl, url, ptr - url);
./curl-83.40.2/curl/lib/http.c:2064:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(newurl + (ptr - url), conn->host.name, newlen);
./curl-83.40.2/curl/lib/http.c:2066:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(newurl + newlen + (ptr - url),
./curl-83.40.2/curl/lib/http.c:2879:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(k->hbufp, k->str_start, length);
./curl-83.40.2/curl/lib/http.c:3254:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char scratch[SCRATCHSIZE+1]; /* "HTTP/major.minor 123" */
./curl-83.40.2/curl/lib/http2.c:280:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&stream->mem[stream->memlen],
./curl-83.40.2/curl/lib/http2.c:375:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&stream->mem[stream->memlen], data, nread);
./curl-83.40.2/curl/lib/http2.c:620:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buf, stream->upload_mem, nread);
./curl-83.40.2/curl/lib/http2.c:835:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(mem, stream->header_recvbuf->buffer + stream->nread_header_recvbuf,
./curl-83.40.2/curl/lib/http2.c:861:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(mem, stream->pausedata, nread);
./curl-83.40.2/curl/lib/http2.c:1069:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  nva[0].namelen = (uint16_t)strlen((char *)nva[0].name);
./curl-83.40.2/curl/lib/http2.c:1078:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  nva[1].namelen = (uint16_t)strlen((char *)nva[1].name);
./curl-83.40.2/curl/lib/http2.c:1084:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  nva[2].namelen = (uint16_t)strlen((char *)nva[2].name);
./curl-83.40.2/curl/lib/http2.c:1089:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  nva[2].valuelen = (uint16_t)strlen((char *)nva[2].value);
./curl-83.40.2/curl/lib/http2.c:1103:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      nva[i].namelen = (uint16_t)strlen((char *)nva[i].name);
./curl-83.40.2/curl/lib/http2.c:1309:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(httpc->inbuf, mem, nread);
./curl-83.40.2/curl/lib/http_chunks.h:83:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char hexbuffer[ MAXNUM_SIZE + 1];
./curl-83.40.2/curl/lib/idn_win32.c:74:  [2] (buffer) wchar_t:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    wchar_t punycode[IDN_MAX_LENGTH];
./curl-83.40.2/curl/lib/if2ip.c:139:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
            char scope[12] = "";
./curl-83.40.2/curl/lib/if2ip.c:140:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
            char ipstr[64];
./curl-83.40.2/curl/lib/if2ip.c:199:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[256];
./curl-83.40.2/curl/lib/if2ip.c:230:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(req.ifr_name, interf, len+1);
./curl-83.40.2/curl/lib/if2ip.c:242:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&in, &s->sin_addr, sizeof(in));
./curl-83.40.2/curl/lib/if2ip.h:53:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char ifrn_name[IFNAMSIZ]; /* if name, e.g. "en0" */
./curl-83.40.2/curl/lib/imap.c:1053:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char tmp[20];
./curl-83.40.2/curl/lib/imap.h:77:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char resptag[5];            /* Response tag to wait for */
./curl-83.40.2/curl/lib/inet_ntop.c:53:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char tmp[sizeof "255.255.255.255"];
./curl-83.40.2/curl/lib/inet_ntop.c:87:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char tmp[sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")];
./curl-83.40.2/curl/lib/inet_pton.c:97:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char tmp[INADDRSZ], *tp;
./curl-83.40.2/curl/lib/inet_pton.c:131:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(dst, tmp, INADDRSZ);
./curl-83.40.2/curl/lib/inet_pton.c:154:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char tmp[IN6ADDRSZ], *tp, *endp, *colonp;
./curl-83.40.2/curl/lib/inet_pton.c:229:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(dst, tmp, IN6ADDRSZ);
./curl-83.40.2/curl/lib/krb5.c:94:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(buf, "599 ");
./curl-83.40.2/curl/lib/krb5.c:98:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(buf, dec.value, dec.length);
./curl-83.40.2/curl/lib/krb5.c:142:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(*to, enc.value, enc.length);
./curl-83.40.2/curl/lib/md4.c:57:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char buffer[64];
./curl-83.40.2/curl/lib/md4.c:226:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&ctx->buffer[used], data, size);
./curl-83.40.2/curl/lib/md4.c:230:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ctx->buffer[used], data, available);
./curl-83.40.2/curl/lib/md4.c:241:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ctx->buffer, data, size);
./curl-83.40.2/curl/lib/md5.c:52:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX * ctx)
./curl-83.40.2/curl/lib/md5.c:78:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX * ctx)
./curl-83.40.2/curl/lib/md5.c:80:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 16);
./curl-83.40.2/curl/lib/md5.c:120:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
./curl-83.40.2/curl/lib/md5.c:152:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
./curl-83.40.2/curl/lib/md5.c:222:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char buffer[64];
./curl-83.40.2/curl/lib/md5.c:413:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&ctx->buffer[used], data, size);
./curl-83.40.2/curl/lib/md5.c:417:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&ctx->buffer[used], data, available);
./curl-83.40.2/curl/lib/md5.c:428:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ctx->buffer, data, size);
./curl-83.40.2/curl/lib/memdebug.c:115:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      logfile = fopen(logname, FOPEN_WRITETEXT);
./curl-83.40.2/curl/lib/memdebug.c:236:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(mem, str, len);
./curl-83.40.2/curl/lib/memdebug.c:261:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(mem, str, bsiz);
./curl-83.40.2/curl/lib/memdebug.c:422:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  FILE *res=fopen(file, mode);
./curl-83.40.2/curl/lib/memdebug.h:149:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
#undef fopen
./curl-83.40.2/curl/lib/memdebug.h:150:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
#define fopen(file,mode) curl_fopen(file,mode,__LINE__,__FILE__)
./curl-83.40.2/curl/lib/mprintf.c:576:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char *endpos[MAX_PARAMETERS];
./curl-83.40.2/curl/lib/mprintf.c:579:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char work[BUFFSIZE];
./curl-83.40.2/curl/lib/mprintf.c:866:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
        char formatbuf[32]="%";
./curl-83.40.2/curl/lib/multi.c:2097:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(data->sockets, socks, num*sizeof(curl_socket_t));
./curl-83.40.2/curl/lib/multi.c:2177:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(tv, e->ptr, sizeof(*tv));
./curl-83.40.2/curl/lib/multi.c:2537:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(timedup, stamp, sizeof(*timedup));
./curl-83.40.2/curl/lib/netrc.c:81:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char pwbuf[1024];
./curl-83.40.2/curl/lib/netrc.c:112:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  file = fopen(netrcfile, FOPEN_READTEXT);
./curl-83.40.2/curl/lib/netrc.c:119:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char netrcbuffer[256];
./curl-83.40.2/curl/lib/non-ascii.c:66:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(convbuf, indata, insize);
./curl-83.40.2/curl/lib/openldap.c:194:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char hosturl[1024];
./curl-83.40.2/curl/lib/openldap.c:199:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
  strcpy(hosturl, "ldap");
./curl-83.40.2/curl/lib/parsedate.c:97:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char name[5];
./curl-83.40.2/curl/lib/parsedate.c:354:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buf[32]="";
./curl-83.40.2/curl/lib/parsedate.h:25:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
extern const char * const Curl_wkday[7];
./curl-83.40.2/curl/lib/parsedate.h:26:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
extern const char * const Curl_month[12];
./curl-83.40.2/curl/lib/pingpong.c:297:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(ptr, pp->cache, pp->cache_size);
./curl-83.40.2/curl/lib/pingpong.c:429:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(pp->cache, pp->linestart_resp, pp->cache_size);
./curl-83.40.2/curl/lib/pop3.c:451:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char digest[MD5_DIGEST_LEN];
./curl-83.40.2/curl/lib/pop3.c:452:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char secret[2 * MD5_DIGEST_LEN + 1];
./curl-83.40.2/curl/lib/pop3.c:674:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(pop3c->apoptimestamp, line + i, timestamplen);
./curl-83.40.2/curl/lib/progress.c:36:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
    strcpy(r, "--:--:--");
./curl-83.40.2/curl/lib/progress.c:265:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char max5[6][10];
./curl-83.40.2/curl/lib/progress.c:276:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char time_left[10];
./curl-83.40.2/curl/lib/progress.c:277:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char time_total[10];
./curl-83.40.2/curl/lib/progress.c:278:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char time_spent[10];
./curl-83.40.2/curl/lib/rtsp.c:606:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(rtspc->rtp_buf + rtspc->rtp_bufsize, k->str, *nread);
./curl-83.40.2/curl/lib/rtsp.c:680:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(scratch, rtp, rtp_dataleft);
./curl-83.40.2/curl/lib/rtsp.c:799:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(data->set.str[STRING_RTSP_SESSION_ID], start, end - start);
./curl-83.40.2/curl/lib/security.c:119:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char print_buffer[50];
./curl-83.40.2/curl/lib/security.c:222:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(data, (char*)buf->data + buf->index, len);
./curl-83.40.2/curl/lib/sendf.c:130:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char print_buffer[2048 + 1];
./curl-83.40.2/curl/lib/sendf.c:357:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(dupl, ptr, len);
./curl-83.40.2/curl/lib/sendf.c:409:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(newptr + data->state.tempwritesize, ptr, len);
./curl-83.40.2/curl/lib/sendf.c:570:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(buf, conn->master_buffer + conn->read_pos, bytestocopy);
./curl-83.40.2/curl/lib/sendf.c:594:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buf, conn->master_buffer, nread);
./curl-83.40.2/curl/lib/sendf.c:608:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static const char s_infotype[CURLINFO_END][3] = {
./curl-83.40.2/curl/lib/sendf.c:612:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[BUFSIZE+1];
./curl-83.40.2/curl/lib/sendf.c:624:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buf, ptr, size);
./curl-83.40.2/curl/lib/sendf.c:680:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buffer[160];
./curl-83.40.2/curl/lib/smb.c:349:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy((char *)h->magic, "\xffSMB", 4);
./curl-83.40.2/curl/lib/smb.c:411:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(conn->data->state.uploadbuffer + sizeof(struct smb_header),
./curl-83.40.2/curl/lib/smb.c:429:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char lm_hash[21];
./curl-83.40.2/curl/lib/smb.c:430:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char lm[24];
./curl-83.40.2/curl/lib/smb.c:431:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char nt_hash[21];
./curl-83.40.2/curl/lib/smb.c:432:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char nt[24];
./curl-83.40.2/curl/lib/smb.c:459:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(p, lm, sizeof(lm));
./curl-83.40.2/curl/lib/smb.c:461:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(p, nt, sizeof(nt));
./curl-83.40.2/curl/lib/smb.c:679:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(smbc->challenge, nrsp->bytes, sizeof(smbc->challenge));
./curl-83.40.2/curl/lib/smb.h:37:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char challenge[8];
./curl-83.40.2/curl/lib/smb.h:98:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char magic[4];
./curl-83.40.2/curl/lib/smb.h:104:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char signature[8];
./curl-83.40.2/curl/lib/smb.h:128:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char bytes[1];
./curl-83.40.2/curl/lib/smb.h:148:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char bytes[1024];
./curl-83.40.2/curl/lib/smb.h:157:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char bytes[1024];
./curl-83.40.2/curl/lib/smb.h:180:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char bytes[1024];
./curl-83.40.2/curl/lib/smtp.c:1537:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char localhost[HOSTNAME_MAX + 1];
./curl-83.40.2/curl/lib/smtp.c:1617:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&scratch[si], &SMTP_EOB[eob_sent], smtp->eob - eob_sent);
./curl-83.40.2/curl/lib/smtp.c:1635:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&scratch[si], &SMTP_EOB_REPL[eob_sent],
./curl-83.40.2/curl/lib/smtp.c:1647:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&scratch[si], &SMTP_EOB[eob_sent], smtp->eob - eob_sent);
./curl-83.40.2/curl/lib/sockaddr.h:37:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char cbuf[256];   /* this should be big enough to fit a lot */
./curl-83.40.2/curl/lib/socks.c:117:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char socksreq[SOCKS4REQLEN]; /* room for SOCKS4 request incl. user
./curl-83.40.2/curl/lib/socks.c:172:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buf[64];
./curl-83.40.2/curl/lib/socks.c:210:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq + 8, proxy_name, plen+1);
./curl-83.40.2/curl/lib/socks.c:371:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char socksreq[600]; /* room for large user/pw (255 max each) */
./curl-83.40.2/curl/lib/socks.c:505:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(socksreq + len, proxy_name, proxy_name_len);
./curl-83.40.2/curl/lib/socks.c:509:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(socksreq + len, proxy_password, proxy_password_len);
./curl-83.40.2/curl/lib/socks.c:572:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&socksreq[len], hostname, hostname_len); /* address str w/o NULL */
./curl-83.40.2/curl/lib/socks_gssapi.c:54:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buf[1024];
./curl-83.40.2/curl/lib/socks_gssapi.c:76:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(buf+len, ".\n");
./curl-83.40.2/curl/lib/socks_gssapi.c:122:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char socksreq[4]; /* room for GSS-API exchange header only */
./curl-83.40.2/curl/lib/socks_gssapi.c:139:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(service.value, serviceptr, service.length);
./curl-83.40.2/curl/lib/socks_gssapi.c:195:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(socksreq+2, &us_length, sizeof(short));
./curl-83.40.2/curl/lib/socks_gssapi.c:260:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&us_length, socksreq+2, sizeof(short));
./curl-83.40.2/curl/lib/socks_gssapi.c:319:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(user, gss_send_token.value, gss_send_token.length);
./curl-83.40.2/curl/lib/socks_gssapi.c:375:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq+2, &us_length, sizeof(short));
./curl-83.40.2/curl/lib/socks_gssapi.c:384:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(gss_send_token.value, &gss_enc, 1);
./curl-83.40.2/curl/lib/socks_gssapi.c:400:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq+2, &us_length, sizeof(short));
./curl-83.40.2/curl/lib/socks_gssapi.c:412:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq, &gss_enc, 1);
./curl-83.40.2/curl/lib/socks_gssapi.c:454:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&us_length, socksreq+2, sizeof(short));
./curl-83.40.2/curl/lib/socks_gssapi.c:495:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq, gss_w_token.value, gss_w_token.length);
./curl-83.40.2/curl/lib/socks_gssapi.c:507:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq, gss_recv_token.value, gss_recv_token.length);
./curl-83.40.2/curl/lib/socks_sspi.c:85:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char socksreq[4]; /* room for GSS-API exchange header only */
./curl-83.40.2/curl/lib/socks_sspi.c:101:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(service_name, service, strlen(service));
./curl-83.40.2/curl/lib/socks_sspi.c:198:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(socksreq+2, &us_length, sizeof(short));
./curl-83.40.2/curl/lib/socks_sspi.c:282:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&us_length, socksreq+2, sizeof(short));
./curl-83.40.2/curl/lib/socks_sspi.c:376:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq+2, &us_length, sizeof(short));
./curl-83.40.2/curl/lib/socks_sspi.c:405:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(sspi_w_token[1].pvBuffer, &gss_enc, 1);
./curl-83.40.2/curl/lib/socks_sspi.c:439:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(sspi_send_token.pvBuffer, sspi_w_token[0].pvBuffer,
./curl-83.40.2/curl/lib/socks_sspi.c:441:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy((PUCHAR) sspi_send_token.pvBuffer +(int)sspi_w_token[0].cbBuffer,
./curl-83.40.2/curl/lib/socks_sspi.c:443:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy((PUCHAR) sspi_send_token.pvBuffer
./curl-83.40.2/curl/lib/socks_sspi.c:459:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq+2, &us_length, sizeof(short));
./curl-83.40.2/curl/lib/socks_sspi.c:472:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq, &gss_enc, 1);
./curl-83.40.2/curl/lib/socks_sspi.c:516:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&us_length, socksreq+2, sizeof(short));
./curl-83.40.2/curl/lib/socks_sspi.c:526:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  result = Curl_blockread_all(conn, sock, (char *)sspi_w_token[0].pvBuffer,
./curl-83.40.2/curl/lib/socks_sspi.c:570:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq, sspi_w_token[1].pvBuffer, sspi_w_token[1].cbBuffer);
./curl-83.40.2/curl/lib/socks_sspi.c:582:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(socksreq, sspi_w_token[0].pvBuffer, sspi_w_token[0].cbBuffer);
./curl-83.40.2/curl/lib/ssh.c:426:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(real_path, working_path+3, 4 + working_path_len-3);
./curl-83.40.2/curl/lib/ssh.c:428:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(real_path, working_path, 1 + working_path_len);
./curl-83.40.2/curl/lib/ssh.c:440:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(real_path, homedir, homelen);
./curl-83.40.2/curl/lib/ssh.c:444:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
        memcpy(real_path+homelen+1, working_path + 3,
./curl-83.40.2/curl/lib/ssh.c:454:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(real_path, working_path, 1+working_path_len);
./curl-83.40.2/curl/lib/ssh.c:653:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char md5buffer[33];
./curl-83.40.2/curl/lib/ssh.c:1125:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char tempHome[PATH_MAX];
./curl-83.40.2/curl/lib/ssh.c:1949:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(sshc->readdir_line, sshc->readdir_longentry,
./curl-83.40.2/curl/lib/ssh.c:3264:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(*path, cp, end - cp);
./curl-83.40.2/curl/lib/strdup.c:47:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(newstr, str, (len+1)*sizeof(char));
./curl-83.40.2/curl/lib/strdup.c:70:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(buffer, src, length);
./curl-83.40.2/curl/lib/strerror.c:639:  [2] (buffer) wchar_t:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    wchar_t wbuf[256];
./curl-83.40.2/curl/lib/strerror.c:677:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buffer[256];
./curl-83.40.2/curl/lib/strerror.c:690:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buffer[256];
./curl-83.40.2/curl/lib/strerror.c:803:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char txtbuf[80];
./curl-83.40.2/curl/lib/strerror.c:804:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char msgbuf[sizeof(conn->syserr_buf)];
./curl-83.40.2/curl/lib/strerror.c:1084:  [2] (buffer) wchar_t:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      wchar_t wbuf[256];
./curl-83.40.2/curl/lib/telnet.c:160:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char subopt_ttype[32];             /* Set with suboption TTYPE */
./curl-83.40.2/curl/lib/telnet.c:161:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char subopt_xdisploc[128];         /* Set with suboption XDISPLOC */
./curl-83.40.2/curl/lib/telnet.c:167:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char subbuffer[SUBBUFSIZE];
./curl-83.40.2/curl/lib/telnet.c:346:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
   unsigned char buf[3];
./curl-83.40.2/curl/lib/telnet.c:822:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char option_keyword[128] = "";
./curl-83.40.2/curl/lib/telnet.c:823:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char option_arg[256] = "";
./curl-83.40.2/curl/lib/telnet.c:890:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
        binary_option=atoi(option_arg);
./curl-83.40.2/curl/lib/telnet.c:927:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char temp[2048];
./curl-83.40.2/curl/lib/telnet.c:932:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char varname[128] = "";
./curl-83.40.2/curl/lib/telnet.c:933:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char varval[128] = "";
./curl-83.40.2/curl/lib/telnet.c:1227:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char outbuf[2];
./curl-83.40.2/curl/lib/tftp.c:452:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[64];
./curl-83.40.2/curl/lib/tftp.c:1094:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&state->remote_addr, &fromaddr, fromlen);
./curl-83.40.2/curl/lib/transfer.c:170:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char hexbuffer[11];
./curl-83.40.2/curl/lib/transfer.c:196:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(data->req.upload_fromhere, hexbuffer, hexlen);
./curl-83.40.2/curl/lib/transfer.c:199:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(data->req.upload_fromhere + nread,
./curl-83.40.2/curl/lib/transfer.c:336:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buf[512 + 1];
./curl-83.40.2/curl/lib/transfer.c:341:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(buf, conn->master_buffer + conn->read_pos, show);
./curl-83.40.2/curl/lib/transfer.c:1450:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char prot[16]; /* URL protocol string storage */
./curl-83.40.2/curl/lib/transfer.c:1597:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(newest, url_clone, urllen);
./curl-83.40.2/curl/lib/url.c:1030:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
            memcpy(p, argptr, (size_t)data->set.postfieldsize);
./curl-83.40.2/curl/lib/url.c:3929:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char protobuf[16] = "";
./curl-83.40.2/curl/lib/url.c:4087:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(path+1, query, hostlen);
./curl-83.40.2/curl/lib/url.c:4152:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(reurl, data->change.url, prefixlen);
./curl-83.40.2/curl/lib/url.c:4155:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&reurl[prefixlen], path, plen + 1);
./curl-83.40.2/curl/lib/url.c:4200:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
        char ifname[IFNAMSIZ + 2];
./curl-83.40.2/curl/lib/url.c:4458:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char proxy_env[128];
./curl-83.40.2/curl/lib/url.c:4475:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
    strcpy(envp, "_proxy");
./curl-83.40.2/curl/lib/url.c:4674:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char proxyuser[MAX_CURL_USER_LENGTH]="";
./curl-83.40.2/curl/lib/url.c:4675:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char proxypasswd[MAX_CURL_PASSWORD_LENGTH]="";
./curl-83.40.2/curl/lib/url.c:4915:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(ubuf, login, ulen);
./curl-83.40.2/curl/lib/url.c:4923:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(pbuf, psep + 1, plen);
./curl-83.40.2/curl/lib/url.c:4931:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(obuf, osep + 1, olen);
./curl-83.40.2/curl/lib/url.c:5001:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char type[12]="";
./curl-83.40.2/curl/lib/urldata.h:443:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char nonce[8];
./curl-83.40.2/curl/lib/urldata.h:862:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char ip_addr_str[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/urldata.h:881:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char primary_ip[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/urldata.h:888:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char local_ip[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/urldata.h:1009:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char syserr_buf [256]; /* buffer for Curl_strerror() */
./curl-83.40.2/curl/lib/urldata.h:1095:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char conn_primary_ip[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/urldata.h:1098:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char conn_local_ip[MAX_IPADR_LEN];
./curl-83.40.2/curl/lib/urldata.h:1214:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[BUFSIZE+1]; /* download buffer */
./curl-83.40.2/curl/lib/urldata.h:1215:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char uploadbuffer[BUFSIZE+1]; /* upload buffer */
./curl-83.40.2/curl/lib/urldata.h:1592:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char *str[STRING_LAST]; /* array of strings, pointing to allocated memory */
./curl-83.40.2/curl/lib/version.c:65:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char version[200];
./curl-83.40.2/curl/lib/version.c:131:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char suff[2];
./curl-83.40.2/curl/lib/version.c:315:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char ssh_buffer[80];
./curl-83.40.2/curl/lib/version.c:319:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char ssl_buffer[80];
./curl-83.40.2/curl/lib/vtls/axtls.c:621:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(buf, read_buf,
./curl-83.40.2/curl/lib/vtls/cyassl.c:102:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error_buffer[CYASSL_MAX_ERROR_SZ];
./curl-83.40.2/curl/lib/vtls/cyassl.c:347:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char error_buffer[CYASSL_MAX_ERROR_SZ];
./curl-83.40.2/curl/lib/vtls/cyassl.c:497:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error_buffer[CYASSL_MAX_ERROR_SZ];
./curl-83.40.2/curl/lib/vtls/cyassl.c:542:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error_buffer[CYASSL_MAX_ERROR_SZ];
./curl-83.40.2/curl/lib/vtls/darwinssl.c:804:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
  *major = atoi(os_version_major);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:805:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
  *minor = atoi(os_version_minor);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1224:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
        char cert_summary_c[128];
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1579:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char buf[cap], *data;
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1581:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fd = open(file, 0);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1612:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(data + len, buf, n);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1673:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char subject_cbuf[128];
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1960:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char server_cert_summary_c[128];
./curl-83.40.2/curl/lib/vtls/darwinssl.c:2240:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[120];
./curl-83.40.2/curl/lib/vtls/gskit.c:994:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[120];
./curl-83.40.2/curl/lib/vtls/gtls.c:234:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  if(!(f = fopen(file, "rb")))
./curl-83.40.2/curl/lib/vtls/gtls.c:794:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char certbuf[256] = ""; /* big enough? */
./curl-83.40.2/curl/lib/vtls/gtls.c:858:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      const char *beg = (const char *) chainp[i].data;
./curl-83.40.2/curl/lib/vtls/gtls.c:1054:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char addrbuf[sizeof(struct use_addr)];
./curl-83.40.2/curl/lib/vtls/gtls.c:1055:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char certaddr[sizeof(struct use_addr)];
./curl-83.40.2/curl/lib/vtls/gtls.c:1391:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[120];
./curl-83.40.2/curl/lib/vtls/gtls.c:1555:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(md5sum, gcry_md_read (MD5pw, 0), md5len);
./curl-83.40.2/curl/lib/vtls/nss.c:689:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char buf[50];
./curl-83.40.2/curl/lib/vtls/nss.c:793:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char timeString[256];
./curl-83.40.2/curl/lib/vtls/nss.c:1214:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&nspr_io_methods, PR_GetDefaultIOMethods(), sizeof nspr_io_methods);
./curl-83.40.2/curl/lib/vtls/nss.c:1774:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char protocols[128];
./curl-83.40.2/curl/lib/vtls/nss.c:1779:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,
./curl-83.40.2/curl/lib/vtls/nss.c:1785:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);
./curl-83.40.2/curl/lib/vtls/openssl.c:155:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(buf, global_passwd, klen+1);
./curl-83.40.2/curl/lib/vtls/openssl.c:234:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char randb[64];
./curl-83.40.2/curl/lib/vtls/openssl.c:450:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      f = fopen(cert_file, "rb");
./curl-83.40.2/curl/lib/vtls/openssl.c:666:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(buf, biomem->data, size);
./curl-83.40.2/curl/lib/vtls/openssl.c:808:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buf[256];
./curl-83.40.2/curl/lib/vtls/openssl.c:898:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[120]; /* We will use this for the OpenSSL error buffer, so it has
./curl-83.40.2/curl/lib/vtls/openssl.c:1210:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
              memcpy(peer_CN, ASN1_STRING_data(tmp), j);
./curl-83.40.2/curl/lib/vtls/openssl.c:1485:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char ssl_buf[1024];
./curl-83.40.2/curl/lib/vtls/openssl.c:1486:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char unknown[32];
./curl-83.40.2/curl/lib/vtls/openssl.c:1890:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char protocols[128];
./curl-83.40.2/curl/lib/vtls/openssl.c:1896:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(&protocols[cur], NGHTTP2_PROTO_VERSION_ID,
./curl-83.40.2/curl/lib/vtls/openssl.c:1904:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&protocols[cur], ALPN_HTTP_1_1, ALPN_HTTP_1_1_LENGTH);
./curl-83.40.2/curl/lib/vtls/openssl.c:2133:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char error_buffer[256]; /* OpenSSL documents that this must be at least
./curl-83.40.2/curl/lib/vtls/openssl.c:2261:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char namebuf[32];
./curl-83.40.2/curl/lib/vtls/openssl.c:2307:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buf[512];
./curl-83.40.2/curl/lib/vtls/openssl.c:2309:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char namebuf[128];
./curl-83.40.2/curl/lib/vtls/openssl.c:2357:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[1024];
./curl-83.40.2/curl/lib/vtls/openssl.c:2683:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      fp = fopen(data->set.str[STRING_SSL_ISSUERCERT], FOPEN_READTEXT);
./curl-83.40.2/curl/lib/vtls/openssl.c:2983:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error_buffer[120]; /* OpenSSL documents that this must be at least 120
./curl-83.40.2/curl/lib/vtls/openssl.c:3034:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char error_buffer[120]; /* OpenSSL documents that this must be at
./curl-83.40.2/curl/lib/vtls/openssl.c:3089:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char sub[3];
./curl-83.40.2/curl/lib/vtls/openssl.c:3136:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char sub[2];
./curl-83.40.2/curl/lib/vtls/polarssl.c:145:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char errorbuf[128];
./curl-83.40.2/curl/lib/vtls/polarssl.c:332:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&connssl->ssn, old_session, old_session_size);
./curl-83.40.2/curl/lib/vtls/polarssl.c:393:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[1024];
./curl-83.40.2/curl/lib/vtls/polarssl.c:395:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char errorbuf[128];
./curl-83.40.2/curl/lib/vtls/polarssl.c:512:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(new_session, our_ssl_sessionid, sizeof(ssl_session));
./curl-83.40.2/curl/lib/vtls/schannel.c:395:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(inbuf[0].pvBuffer, connssl->encdata_buffer,
./curl-83.40.2/curl/lib/vtls/schannel.c:752:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(outbuf[1].pvBuffer, buf, len);
./curl-83.40.2/curl/lib/vtls/schannel.c:1007:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(connssl->decdata_buffer + connssl->decdata_offset,
./curl-83.40.2/curl/lib/vtls/schannel.c:1134:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buf, connssl->decdata_buffer, size);
./curl-83.40.2/curl/lib/vtls/schannel.c:1420:  [2] (buffer) TCHAR:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      TCHAR cert_hostname_buff[128];
./curl-83.40.2/curl/lib/vtls/vtls.c:197:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy((char *)&randseed, force_entropy, min);
./curl-83.40.2/curl/lib/vtls/vtls.c:216:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    int fd = open(RANDOM_FILE, O_RDONLY);
./curl-83.40.2/curl/lib/vtls/vtls.c:669:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(&output[labellen+1], value, valuelen);
./curl-83.40.2/curl/lib/vtls/vtls.c:783:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fp = fopen(pinnedpubkey, "rb");
./curl-83.40.2/curl/lib/x509asn1.c:292:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(buf, from, outlength);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:58:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
makeOS400IconvCode(char buf[ICONV_ID_SIZE], unsigned int ccsid)
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:84:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char fromcode[ICONV_ID_SIZE];
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:85:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char tocode[ICONV_ID_SIZE];
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:133:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(d, s, i);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:470:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy((char *) id, (char *) p, sizeof *p);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:476:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(cp, (char *) p->protocols, i);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:726:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
          free((char *) forms[nargs].value);
./curl-83.40.2/curl/packages/OS400/os400sys.c:769:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(buf->value, t, i);
./curl-83.40.2/curl/packages/OS400/os400sys.c:789:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy((char *) &in, (char *) in_name, sizeof in);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1219:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy((char *) dstaddr, (char *) srcaddr, srclen);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1333:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy((char *) fromaddr, (char *) &laddr, laddrlen);
./curl-83.40.2/curl/packages/vms/curl_crtl_init.c:180:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char unix_shell_name[255];
./curl-83.40.2/curl/src/tool_cb_dbg.c:53:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char timebuf[20];
./curl-83.40.2/curl/src/tool_cb_dbg.c:82:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      config->trace_stream = fopen(config->trace_dump, FOPEN_WRITETEXT);
./curl-83.40.2/curl/src/tool_cb_hdr.c:147:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(copy, ptr, len);
./curl-83.40.2/curl/src/tool_cb_hdr.c:212:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buffer[512]; /* suitably large */
./curl-83.40.2/curl/src/tool_cb_prg.c:47:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char line[MAX_BARLENGTH+1];
./curl-83.40.2/curl/src/tool_cb_prg.c:48:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char format[40];
./curl-83.40.2/curl/src/tool_cb_wrt.c:47:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    file = fopen(outs->filename, "rb");
./curl-83.40.2/curl/src/tool_cb_wrt.c:57:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  file = fopen(outs->filename, "wb");
./curl-83.40.2/curl/src/tool_doswin.c:103:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char new_name[PATH_MAX];
./curl-83.40.2/curl/src/tool_doswin.c:123:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char dos_name[PATH_MAX];
./curl-83.40.2/curl/src/tool_doswin.c:184:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy (d, "plus", 4);
./curl-83.40.2/curl/src/tool_doswin.c:214:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char fname[PATH_MAX];
./curl-83.40.2/curl/src/tool_easysrc.c:179:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      out = fopen(o, FOPEN_WRITETEXT);
./curl-83.40.2/curl/src/tool_formparse.c:151:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char name[256];
./curl-83.40.2/curl/src/tool_formparse.c:153:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char type_major[128] = "";
./curl-83.40.2/curl/src/tool_formparse.c:154:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char type_minor[128] = "";
./curl-83.40.2/curl/src/tool_getparam.c:684:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
          FILE *newfile = fopen(nextarg, FOPEN_WRITETEXT);
./curl-83.40.2/curl/src/tool_getparam.c:1142:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
            file = fopen(p, "rb");
./curl-83.40.2/curl/src/tool_getparam.c:1208:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
          file = fopen(nextarg, "rb");
./curl-83.40.2/curl/src/tool_getparam.c:1264:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
        memcpy(config->postfields, oldpost, (size_t)oldlen);
./curl-83.40.2/curl/src/tool_getparam.c:1267:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
        memcpy(&config->postfields[oldlen+1], postdata, size);
./curl-83.40.2/curl/src/tool_getparam.c:1617:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
        char buffer[32];
./curl-83.40.2/curl/src/tool_getparam.c:1751:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
          file = fopen(nextarg, FOPEN_READTEXT);
./curl-83.40.2/curl/src/tool_getpass.c:230:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  int fd = open("/dev/tty", O_RDONLY);
./curl-83.40.2/curl/src/tool_homedir.c:36:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char  buf1[1024], buf2[1024];
./curl-83.40.2/curl/src/tool_main.c:100:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char fname[CURL_MT_LOGFNAME_BUFSIZE];
./curl-83.40.2/curl/src/tool_metalink.c:136:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:154:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:172:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:192:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:194:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 16);
./curl-83.40.2/curl/src/tool_metalink.c:211:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:213:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 20);
./curl-83.40.2/curl/src/tool_metalink.c:230:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:232:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(digest, gcry_md_read(*ctx, 0), 32);
./curl-83.40.2/curl/src/tool_metalink.c:284:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *pctx)
./curl-83.40.2/curl/src/tool_metalink.c:301:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *pctx)
./curl-83.40.2/curl/src/tool_metalink.c:318:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *pctx)
./curl-83.40.2/curl/src/tool_metalink.c:338:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:356:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:374:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:411:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void MD5_Final(unsigned char digest[16], MD5_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:432:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA1_Final(unsigned char digest[20], SHA_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:453:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static void SHA256_Final(unsigned char digest[32], SHA256_CTX *ctx)
./curl-83.40.2/curl/src/tool_metalink.c:608:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fd = open(filename, flags);
./curl-83.40.2/curl/src/tool_metalink.c:629:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    unsigned char buf[4096];
./curl-83.40.2/curl/src/tool_msgs.c:47:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char print_buffer[256];
./curl-83.40.2/curl/src/tool_operate.c:149:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[8192];
./curl-83.40.2/curl/src/tool_operate.c:154:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  file = fopen(name, "r"); /* VMS */
./curl-83.40.2/curl/src/tool_operate.c:193:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char errorbuffer[CURL_ERROR_SIZE];
./curl-83.40.2/curl/src/tool_operate.c:321:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      FILE *newfile = fopen(config->headerfile, "wb");
./curl-83.40.2/curl/src/tool_operate.c:609:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
            FILE *file = fopen(outfile, config->resume_from?"ab":"wb",
./curl-83.40.2/curl/src/tool_operate.c:613:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
            FILE *file = fopen(outfile, config->resume_from?"ab":"wb");
./curl-83.40.2/curl/src/tool_operate.c:665:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
              infd = open(uploadfile, O_RDONLY | O_BINARY);
./curl-83.40.2/curl/src/tool_operate.c:668:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
              infd = open(uploadfile, O_RDONLY | O_BINARY,
./curl-83.40.2/curl/src/tool_operate.c:674:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
          infd = open(uploadfile, O_RDONLY | O_BINARY);
./curl-83.40.2/curl/src/tool_operhlp.c:162:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char buffer[512]; /* suitably large */
./curl-83.40.2/curl/src/tool_paramhlp.c:61:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[256];
./curl-83.40.2/curl/src/tool_paramhlp.c:390:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char passwd[256] = "";
./curl-83.40.2/curl/src/tool_paramhlp.c:391:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char prompt[256];
./curl-83.40.2/curl/src/tool_paramhlp.c:426:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&passptr[userlen+1], passwd, passwdlen+1);
./curl-83.40.2/curl/src/tool_parsecfg.c:51:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char filebuffer[512];
./curl-83.40.2/curl/src/tool_parsecfg.c:72:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
        file = fopen(filebuffer, FOPEN_READTEXT);
./curl-83.40.2/curl/src/tool_parsecfg.c:118:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    file = fopen(filename, FOPEN_READTEXT);
./curl-83.40.2/curl/src/tool_parsecfg.c:334:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[4096];
./curl-83.40.2/curl/src/tool_setopt.c:204:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(e, "\\n");
./curl-83.40.2/curl/src/tool_setopt.c:208:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(e, "\\r");
./curl-83.40.2/curl/src/tool_setopt.c:212:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(e, "\\t");
./curl-83.40.2/curl/src/tool_setopt.c:216:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(e, "\\\\");
./curl-83.40.2/curl/src/tool_setopt.c:220:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(e, "\\\"");
./curl-83.40.2/curl/src/tool_setopt.c:281:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char preamble[80];          /* should accommodate any symbol name */
./curl-83.40.2/curl/src/tool_setopt.c:324:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char preamble[80];
./curl-83.40.2/curl/src/tool_setopt.c:473:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[256];
./curl-83.40.2/curl/src/tool_strdup.c:42:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(newstr, str, (len+1)*sizeof(char));
./curl-83.40.2/curl/src/tool_urlglob.c:54:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(pat->content.Set.elements[0], fixed, len);
./curl-83.40.2/curl/src/tool_urlglob.c:352:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
          memcpy(buf, pattern, skip);
./curl-83.40.2/curl/src/tool_urlglob.c:440:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
      char text[128];
./curl-83.40.2/curl/src/tool_urlglob.c:578:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char numbuf[18];
./curl-83.40.2/curl/src/tool_urlglob.c:665:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(&target[stringlen], appendthis, appendlen);
./curl-83.40.2/curl/src/tool_writeenv.c:76:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char *string, numtext[10];
./curl-83.40.2/curl/tests/libtest/chkhostname.c:30:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buff[HOSTNAME_MAX];
./curl-83.40.2/curl/tests/libtest/first.c:90:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char fname[CURL_MT_LOGFNAME_BUFSIZE];
./curl-83.40.2/curl/tests/libtest/first.c:117:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char dump[200*3+1];
./curl-83.40.2/curl/tests/libtest/lib1502.c:49:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char redirect[160];
./curl-83.40.2/curl/tests/libtest/lib1506.c:39:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char target_url[256];
./curl-83.40.2/curl/tests/libtest/lib1506.c:40:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char dnsentry[256];
./curl-83.40.2/curl/tests/libtest/lib1510.c:37:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char target_url[256];
./curl-83.40.2/curl/tests/libtest/lib1510.c:38:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char dnsentry[256];
./curl-83.40.2/curl/tests/libtest/lib1512.c:41:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char dnsentry[256];
./curl-83.40.2/curl/tests/libtest/lib1512.c:44:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char target_url[256];
./curl-83.40.2/curl/tests/libtest/lib1515.c:120:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char dns_entry[256];
./curl-83.40.2/curl/tests/libtest/lib1515.c:132:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char target_url[256];
./curl-83.40.2/curl/tests/libtest/lib1520.c:63:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/tests/libtest/lib1525.c:42:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr, data, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1526.c:41:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr, data, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1527.c:41:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr, data, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1529.c:31:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char bURL[512];
./curl-83.40.2/curl/tests/libtest/lib1900.c:33:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
char *urlstring[MAX_URLS];
./curl-83.40.2/curl/tests/libtest/lib1900.c:35:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
char *site_blacklist[MAX_BLACKLIST];
./curl-83.40.2/curl/tests/libtest/lib1900.c:36:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
char *server_blacklist[MAX_BLACKLIST];
./curl-83.40.2/curl/tests/libtest/lib1900.c:55:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[200];
./curl-83.40.2/curl/tests/libtest/lib1900.c:61:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  f = fopen(filename, "rb");
./curl-83.40.2/curl/tests/libtest/lib1900.c:114:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char urlbuf[256];
./curl-83.40.2/curl/tests/libtest/lib500.c:96:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      FILE *moo = fopen(libtest_arg2, "wb");
./curl-83.40.2/curl/tests/libtest/lib505.c:56:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd_src = fopen(libtest_arg2, "rb");
./curl-83.40.2/curl/tests/libtest/lib510.c:51:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/tests/libtest/lib518.c:55:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static char msgbuff[256];
./curl-83.40.2/curl/tests/libtest/lib518.c:86:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    fpa[i] = fopen(DEV_NULL, "r");
./curl-83.40.2/curl/tests/libtest/lib518.c:107:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char strbuff[256];
./curl-83.40.2/curl/tests/libtest/lib518.c:108:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char strbuff1[81];
./curl-83.40.2/curl/tests/libtest/lib518.c:109:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char strbuff2[81];
./curl-83.40.2/curl/tests/libtest/lib518.c:133:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib518.c:141:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib518.c:199:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib518.c:207:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib518.c:325:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fd[0] = open(DEV_NULL, O_RDONLY);
./curl-83.40.2/curl/tests/libtest/lib518.c:398:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
    sprintf(strbuff, "select limit is FD_SETSIZE %d", FD_SETSIZE);
./curl-83.40.2/curl/tests/libtest/lib518.c:412:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(strbuff, "select limit is FD_SETSIZE %d", FD_SETSIZE);
./curl-83.40.2/curl/tests/libtest/lib518.c:437:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
    sprintf(strbuff, "stdio fopen() fails with lots of fds open()");
./curl-83.40.2/curl/tests/libtest/lib525.c:56:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd_src = fopen(libtest_arg2, "rb");
./curl-83.40.2/curl/tests/libtest/lib530.c:39:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char target_url[256];
./curl-83.40.2/curl/tests/libtest/lib537.c:56:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static char msgbuff[256];
./curl-83.40.2/curl/tests/libtest/lib537.c:87:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    fpa[i] = fopen(DEV_NULL, "r");
./curl-83.40.2/curl/tests/libtest/lib537.c:109:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char strbuff[256];
./curl-83.40.2/curl/tests/libtest/lib537.c:110:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char strbuff1[81];
./curl-83.40.2/curl/tests/libtest/lib537.c:134:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib537.c:142:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
    strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib537.c:194:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib537.c:202:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
      strcpy(strbuff, "INFINITY");
./curl-83.40.2/curl/tests/libtest/lib537.c:319:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  fd[0] = open(DEV_NULL, O_RDONLY);
./curl-83.40.2/curl/tests/libtest/lib537.c:401:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
    sprintf(strbuff, "select limit is FD_SETSIZE %d", FD_SETSIZE);
./curl-83.40.2/curl/tests/libtest/lib537.c:415:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(strbuff, "select limit is FD_SETSIZE %d", FD_SETSIZE);
./curl-83.40.2/curl/tests/libtest/lib537.c:440:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
    sprintf(strbuff, "stdio fopen() fails with lots of fds open()");
./curl-83.40.2/curl/tests/libtest/lib539.c:67:  [2] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination.
  Consider using strncat or strlcat (warning, strncat is easily misused).
  Risk is low because the source is a constant string.
   newURL = strcat(strcpy(newURL, URL), "./");
./curl-83.40.2/curl/tests/libtest/lib540.c:191:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[246]; /* naively fixed-size */
./curl-83.40.2/curl/tests/libtest/lib541.c:48:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd_src = fopen(libtest_arg2, "rb");
./curl-83.40.2/curl/tests/libtest/lib544.c:69:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant string.
  strcpy(teststring, "FAIL");
./curl-83.40.2/curl/tests/libtest/lib552.c:124:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static char databuf[70000]; /* MUST be more than 64k OR MAX_INITIAL_POST_SIZE */
./curl-83.40.2/curl/tests/libtest/lib552.c:132:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr, databuf + current_offset, given);
./curl-83.40.2/curl/tests/libtest/lib553.c:36:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char buf[1024];
./curl-83.40.2/curl/tests/libtest/lib553.c:48:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(ptr, buf, size);
./curl-83.40.2/curl/tests/libtest/lib553.c:56:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static char buf[SIZE_HEADERS + 100];
./curl-83.40.2/curl/tests/libtest/lib553.c:77:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
    int len = sprintf(buf, "Header%d: ", i);
./curl-83.40.2/curl/tests/libtest/lib556.c:73:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char buf[1024];
./curl-83.40.2/curl/tests/libtest/lib557.c:61:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib557.c:68:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib557.c:75:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib557.c:82:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib557.c:89:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib557.c:96:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib557.c:103:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char result[BUFSZ];   /* result string   */
./curl-83.40.2/curl/tests/libtest/lib566.c:53:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    moo = fopen(libtest_arg2, "wb");
./curl-83.40.2/curl/tests/libtest/lib568.c:77:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  sdp = open("log/file568.txt", O_RDONLY);
./curl-83.40.2/curl/tests/libtest/lib568.c:81:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  sdpf = fopen("log/file568.txt", "rb");
./curl-83.40.2/curl/tests/libtest/lib569.c:44:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  idfile = fopen(libtest_arg2, "wb");
./curl-83.40.2/curl/tests/libtest/lib571.c:107:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  protofile = fopen(libtest_arg2, "wb");
./curl-83.40.2/curl/tests/libtest/lib572.c:95:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  params = open("log/file572.txt", O_RDONLY);
./curl-83.40.2/curl/tests/libtest/lib572.c:99:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  paramsf = fopen("log/file572.txt", "rb");
./curl-83.40.2/curl/tests/libtest/lib578.c:33:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  FILE *moo = fopen(libtest_arg2, "wb");
./curl-83.40.2/curl/tests/libtest/lib579.c:56:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    moo = fopen(libtest_arg2, "ab");
./curl-83.40.2/curl/tests/libtest/lib579.c:80:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(ptr, data, len);
./curl-83.40.2/curl/tests/libtest/lib582.c:245:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  hd_src = fopen(libtest_arg2, "rb");
./curl-83.40.2/curl/tests/libtest/lib591.c:51:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  upload = fopen(libtest_arg3, "rb");
./curl-83.40.2/curl/tests/libtest/lib599.c:82:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    moo = fopen(libtest_arg2, "wb");
./curl-83.40.2/curl/tests/libtest/libntlmconnect.c:56:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(output, ptr, size * nmemb);
./curl-83.40.2/curl/tests/libtest/testtrace.c:92:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char timebuf[20];
./curl-83.40.2/curl/tests/server/fake_ntlm.c:113:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[1024];
./curl-83.40.2/curl/tests/server/fake_ntlm.c:185:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/fake_ntlm.c:203:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/fake_ntlm.c:223:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/fake_ntlm.c:244:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/getpart.c:183:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(*dst_buf + *dst_len, src_buf, src_len);
./curl-83.40.2/curl/tests/server/getpart.c:218:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(*buf, buf64, src_len);
./curl-83.40.2/curl/tests/server/getpart.c:253:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char couter[MAX_TAG_LEN+1]; /* current outermost section */
./curl-83.40.2/curl/tests/server/getpart.c:254:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char cmain[MAX_TAG_LEN+1];  /* current main section */
./curl-83.40.2/curl/tests/server/getpart.c:255:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char csub[MAX_TAG_LEN+1];   /* current sub section */
./curl-83.40.2/curl/tests/server/getpart.c:256:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char ptag[MAX_TAG_LEN+1];   /* potential tag */
./curl-83.40.2/curl/tests/server/getpart.c:257:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char patt[MAX_TAG_LEN+1];   /* potential attributes */
./curl-83.40.2/curl/tests/server/getpart.c:316:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(ptag, ptr, len.uns);
./curl-83.40.2/curl/tests/server/getpart.c:377:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(ptag, ptr, len.uns);
./curl-83.40.2/curl/tests/server/getpart.c:396:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
      memcpy(patt, ptr, len.uns);
./curl-83.40.2/curl/tests/server/rtspd.c:95:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char reqbuf[REQBUFSIZ]; /* buffer area for the incoming request */
./curl-83.40.2/curl/tests/server/rtspd.c:100:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  bool open;      /* keep connection open info, as found in the request */
./curl-83.40.2/curl/tests/server/rtspd.c:331:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char request[REQUEST_KEYWORD_SIZE];
./curl-83.40.2/curl/tests/server/rtspd.c:332:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char doc[MAXDOCNAMELEN];
./curl-83.40.2/curl/tests/server/rtspd.c:333:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char prot_str[5];
./curl-83.40.2/curl/tests/server/rtspd.c:334:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char logbuf[256];
./curl-83.40.2/curl/tests/server/rtspd.c:412:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(logbuf, "Requested test number %ld part %ld",
./curl-83.40.2/curl/tests/server/rtspd.c:418:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/rtspd.c:498:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
                  memcpy(rtp_scratch + 4 + i, RTP_DATA, RTP_DATA_SIZE);
./curl-83.40.2/curl/tests/server/rtspd.c:506:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
                  memcpy(req->rtp_buffer + req->rtp_buffersize, rtp_scratch, rtp_size + 4);
./curl-83.40.2/curl/tests/server/rtspd.c:676:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
     req->open &&
./curl-83.40.2/curl/tests/server/rtspd.c:732:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    dump = fopen(REQUEST_DUMP, "ab");
./curl-83.40.2/curl/tests/server/rtspd.c:898:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char weare[256];
./curl-83.40.2/curl/tests/server/rtspd.c:900:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char partbuf[80]="data";
./curl-83.40.2/curl/tests/server/rtspd.c:930:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char msgbuf[64];
./curl-83.40.2/curl/tests/server/rtspd.c:940:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(msgbuf, "RTSP_SERVER WE ROOLZ: %ld\r\n", (long)getpid());
./curl-83.40.2/curl/tests/server/rtspd.c:974:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(partbuf, "data%ld", req->partno);
./curl-83.40.2/curl/tests/server/rtspd.c:976:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/rtspd.c:1000:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/rtspd.c:1041:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  dump = fopen(RESPONSE_DUMP, "ab");
./curl-83.40.2/curl/tests/server/rtspd.c:1123:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char command[32];
./curl-83.40.2/curl/tests/server/rtspd.c:1405:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      if(!req.open) {
./curl-83.40.2/curl/tests/server/rtspd.c:1410:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      if(req.open)
./curl-83.40.2/curl/tests/server/rtspd.c:1413:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    } while(req.open || (req.testno == DOCNUMBER_CONNECT));
./curl-83.40.2/curl/tests/server/sockfilt.c:467:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char data[120];
./curl-83.40.2/curl/tests/server/sockfilt.c:476:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(optr, "\\n");
./curl-83.40.2/curl/tests/server/sockfilt.c:481:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(optr, "\\r");
./curl-83.40.2/curl/tests/server/sockfilt.c:486:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(optr, "%c", (ISGRAPH(ptr[i]) || ptr[i]==0x20) ?ptr[i]:'.');
./curl-83.40.2/curl/tests/server/sockfilt.c:903:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char buffer[17010];
./curl-83.40.2/curl/tests/server/sockfilt.c:904:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char data[16];
./curl-83.40.2/curl/tests/server/sws.c:95:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char reqbuf[REQBUFSIZ]; /* buffer area for the incoming request */
./curl-83.40.2/curl/tests/server/sws.c:102:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  bool open;      /* keep connection open info, as found in the request */
./curl-83.40.2/curl/tests/server/sws.c:356:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/sws.c:455:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char request[REQUEST_KEYWORD_SIZE];
./curl-83.40.2/curl/tests/server/sws.c:456:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char doc[MAXDOCNAMELEN];
./curl-83.40.2/curl/tests/server/sws.c:457:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char logbuf[456];
./curl-83.40.2/curl/tests/server/sws.c:497:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
        sprintf(logbuf, "Got a *HUGE* request HTTP/%d.%d",
./curl-83.40.2/curl/tests/server/sws.c:530:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
        sprintf(logbuf, "Requested test number %ld part %ld",
./curl-83.40.2/curl/tests/server/sws.c:621:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
        sprintf(logbuf, "Requested test number %ld part %ld (from host name)",
./curl-83.40.2/curl/tests/server/sws.c:671:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(logbuf, "Requested GOPHER test number %ld part %ld",
./curl-83.40.2/curl/tests/server/sws.c:786:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
     req->open &&
./curl-83.40.2/curl/tests/server/sws.c:852:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    dump = fopen(dumpfile, "ab");
./curl-83.40.2/curl/tests/server/sws.c:1041:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char weare[256];
./curl-83.40.2/curl/tests/server/sws.c:1069:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char msgbuf[64];
./curl-83.40.2/curl/tests/server/sws.c:1079:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(msgbuf, "WE ROOLZ: %ld\r\n", (long)getpid());
./curl-83.40.2/curl/tests/server/sws.c:1098:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char partbuf[80];
./curl-83.40.2/curl/tests/server/sws.c:1112:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/sws.c:1135:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/sws.c:1175:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  dump = fopen(responsedump, "ab");
./curl-83.40.2/curl/tests/server/sws.c:1243:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char command[32];
./curl-83.40.2/curl/tests/server/sws.c:1405:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char readclient[2][256];
./curl-83.40.2/curl/tests/server/sws.c:1406:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char readserver[2][256];
./curl-83.40.2/curl/tests/server/sws.c:1905:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  if(!req->open) {
./curl-83.40.2/curl/tests/server/sws.c:1930:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  if(req->open) {
./curl-83.40.2/curl/tests/server/sws.c:1957:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char port_str[11];
./curl-83.40.2/curl/tests/server/sws.c:2302:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
            if(!req.open)
./curl-83.40.2/curl/tests/server/tftp.h:45:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char th_data[1];         /* data or error string */
./curl-83.40.2/curl/tests/server/tftpd.c:128:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char storage[PKTSIZE];
./curl-83.40.2/curl/tests/server/tftpd.c:493:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
    memcpy(dp->th_data, test->rptr, copy_n);
./curl-83.40.2/curl/tests/server/tftpd.c:566:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char outfile[256];
./curl-83.40.2/curl/tests/server/tftpd.c:568:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    test->ofile=open(outfile, O_CREAT|O_RDWR, 0777);
./curl-83.40.2/curl/tests/server/tftpd.c:629:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char rbuf[PKTSIZE];
./curl-83.40.2/curl/tests/server/tftpd.c:956:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  server = fopen(REQUEST_DUMP, "ab");
./curl-83.40.2/curl/tests/server/tftpd.c:1041:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  stream=fopen(filename, "rb");
./curl-83.40.2/curl/tests/server/tftpd.c:1107:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char partbuf[80]="data";
./curl-83.40.2/curl/tests/server/tftpd.c:1112:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char weare[128];
./curl-83.40.2/curl/tests/server/tftpd.c:1113:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
    size_t count = sprintf(weare, "WE ROOLZ: %ld\r\n", (long)getpid());
./curl-83.40.2/curl/tests/server/tftpd.c:1155:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(partbuf, "data%ld", partno);
./curl-83.40.2/curl/tests/server/tftpd.c:1158:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
      FILE *stream=fopen(file, "rb");
./curl-83.40.2/curl/tests/server/tftpd.c:1394:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(tp->th_msg, pe->e_msg, length + 1);
./curl-83.40.2/curl/tests/server/util.c:68:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char buf[256*3];
./curl-83.40.2/curl/tests/server/util.c:80:  [2] (buffer) sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf. Risk
  is low because the source has a constant maximum length.
      sprintf(optr, "%%%02x", *iptr++);
./curl-83.40.2/curl/tests/server/util.c:92:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buffer[2048 + 1];
./curl-83.40.2/curl/tests/server/util.c:98:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char timebuf[20];
./curl-83.40.2/curl/tests/server/util.c:122:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  logfp = fopen(serverlogfile, "ab");
./curl-83.40.2/curl/tests/server/util.c:140:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char buf[512];
./curl-83.40.2/curl/tests/server/util.c:189:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  static char filename[256];
./curl-83.40.2/curl/tests/server/util.c:257:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
  pidfile = fopen(filename, "wb");
./curl-83.40.2/curl/tests/server/util.c:275:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
    lockfile = fopen(filename, "wb");
./curl-83.40.2/curl/tests/unit/unit1304.c:28:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
static char filename[64];
./curl-83.40.2/curl/tests/unit/unit1304.c:52:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
  memcpy(filename, filename1, strlen(filename1));
./curl-83.40.2/curl/tests/unit/unit1307.c:34:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char pattern[MAX_PATTERN_L];
./curl-83.40.2/curl/tests/unit/unit1307.c:35:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  char string[MAX_STRING_L];
./curl-83.40.2/curl/tests/unit/unit1395.c:68:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
    char *out = Curl_dedotdotify((char *)pairs[i].input);
./curl-83.40.2/curl/tests/unit/unit1398.c:32:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
char buf[3] = {'b', 'u', 'g'};
./curl-83.40.2/curl/tests/unit/unit1398.c:35:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
char output[24];
./curl-83.40.2/curl/tests/unit/unit1600.c:43:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char output[21];
./curl-83.40.2/curl/tests/unit/unit1601.c:38:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
  unsigned char output[16];
./curl-83.40.2/curl/docs/examples/anyauthput.c:103:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
  retcode = read(fd, ptr, size * nmemb);
./curl-83.40.2/curl/docs/examples/asiohiper.cpp:318:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
  strncpy(pBuffer, (const char *)ptr, written);
./curl-83.40.2/curl/docs/examples/cookie_interface.c:91:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(nline, sizeof(nline), "%s\t%s\t%s\t%s\t%lu\t%s\t%s",
./curl-83.40.2/curl/docs/examples/cookie_interface.c:105:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(nline, sizeof(nline),
./curl-83.40.2/curl/docs/examples/curlx.c:406:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    serverurl = malloc(9+strlen(hostporturl));
./curl-83.40.2/curl/docs/examples/curlx.c:444:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  contenttype = malloc(15+strlen(mimetype));
./curl-83.40.2/curl/docs/examples/evhiperfifo.c:368:  [1] (buffer) fscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
    rv=fscanf(g->input, "%1023s%n", s, &n);
./curl-83.40.2/curl/docs/examples/fopen.c:479:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    fwrite(buffer,1,strlen(buffer),outf);
./curl-83.40.2/curl/docs/examples/hiperfifo.c:357:  [1] (buffer) fscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
    rv=fscanf(g->input, "%1023s%n", s, &n);
./curl-83.40.2/curl/docs/examples/http2-upload.c:128:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(timebuf, sizeof(timebuf), "%02d:%02d:%02d.%06ld",
./curl-83.40.2/curl/docs/examples/imap-append.c:67:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/docs/examples/post-callback.c:61:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  pooh.sizeleft = (long)strlen(data);
./curl-83.40.2/curl/docs/examples/postinmemory.c:82:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(postthis));
./curl-83.40.2/curl/docs/examples/rtsp.c:49:  [1] (buffer) getchar:
  Check buffer boundaries if used in a loop. 
  ch = getchar();
./curl-83.40.2/curl/docs/examples/rtsp.c:206:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    char *uri = malloc(strlen(url) + 32);
./curl-83.40.2/curl/docs/examples/rtsp.c:207:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    char *sdp_filename = malloc(strlen(url) + 32);
./curl-83.40.2/curl/docs/examples/rtsp.c:208:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    char *control = malloc(strlen(url) + 32);
./curl-83.40.2/curl/docs/examples/sendrecv.c:106:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    res = curl_easy_send(curl, request, strlen(request), &iolen);
./curl-83.40.2/curl/docs/examples/simplepost.c:40:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(postthis));
./curl-83.40.2/curl/docs/examples/smtp-mail.c:68:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/docs/examples/smtp-multi.c:69:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/docs/examples/smtp-ssl.c:69:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/docs/examples/smtp-tls.c:69:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/docs/examples/synctime.c:147:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if (strlen((char *)(ptr)) > 50) /* Can prevent buffer overflow to
./curl-83.40.2/curl/docs/examples/synctime.c:184:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if (strlen(proxy_port) > 0)
./curl-83.40.2/curl/docs/examples/synctime.c:187:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if (strlen(proxy_user_password) > 0)
./curl-83.40.2/curl/docs/examples/synctime.c:274:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(conf->timeserver, MAX_STRING, "%s", &argv[OptionIndex][9]);
./curl-83.40.2/curl/docs/examples/synctime.c:283:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(conf->proxy_user, MAX_STRING, "%s", &argv[OptionIndex][13]);
./curl-83.40.2/curl/docs/examples/synctime.c:286:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(conf->http_proxy, MAX_STRING, "%s", &argv[OptionIndex][8]);
./curl-83.40.2/curl/docs/examples/synctime.c:298:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(conf->timeserver, MAX_STRING, "%s", DefaultTimeServer[0]);
./curl-83.40.2/curl/docs/examples/synctime.c:316:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(tzoneBuf, 15, "%+03d'00'", tzonediffWord);
./curl-83.40.2/curl/docs/examples/synctime.c:318:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(tzoneBuf, 15, "%+03d'30'", tzonediffWord);
./curl-83.40.2/curl/docs/examples/synctime.c:323:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(timeBuf, 60, "%s, %02d %s %04d %02d:%02d:%02d.%03d, ",
./curl-83.40.2/curl/docs/examples/synctime.c:337:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(timeBuf, 60, "%s, %02d %s %04d %02d:%02d:%02d.%03d, ",
./curl-83.40.2/curl/docs/examples/synctime.c:353:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(timeBuf, 60, "%s, %02d %s %04d %02d:%02d:%02d.%03d, ",
./curl-83.40.2/curl/lib/asyn-thread.c:274:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(service, sizeof(service), "%d", tsd->port);
./curl-83.40.2/curl/lib/asyn-thread.c:642:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(sbuf, sizeof(sbuf), "%d", port);
./curl-83.40.2/curl/lib/base64.c:114:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  srclen = strlen(src);
./curl-83.40.2/curl/lib/base64.c:191:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    insize = strlen(indata);
./curl-83.40.2/curl/lib/base64.c:232:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(output, 5, "%c%c==",
./curl-83.40.2/curl/lib/base64.c:237:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(output, 5, "%c%c%c=",
./curl-83.40.2/curl/lib/base64.c:243:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(output, 5, "%c%c%c%c",
./curl-83.40.2/curl/lib/base64.c:257:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  *outlen = strlen(base64data); /* return the length of the new data */
./curl-83.40.2/curl/lib/conncache.c:149:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      bundle = Curl_hash_pick(&connc->hash, key, strlen(key));
./curl-83.40.2/curl/lib/conncache.c:161:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  void *p = Curl_hash_add(&connc->hash, key, strlen(key), bundle);
./curl-83.40.2/curl/lib/connect.c:268:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(dev && (strlen(dev)<255) ) {
./curl-83.40.2/curl/lib/connect.c:276:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strncmp(if_prefix, dev, strlen(if_prefix)) == 0) {
./curl-83.40.2/curl/lib/connect.c:277:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      dev += strlen(if_prefix);
./curl-83.40.2/curl/lib/connect.c:280:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    else if(strncmp(host_prefix, dev, strlen(host_prefix)) == 0) {
./curl-83.40.2/curl/lib/connect.c:281:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      dev += strlen(host_prefix);
./curl-83.40.2/curl/lib/connect.c:321:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                        dev, (curl_socklen_t)strlen(dev)+1) != 0) {
./curl-83.40.2/curl/lib/connect.c:644:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(addr, MAX_IPADR_LEN, "%s", su->sun_path);
./curl-83.40.2/curl/lib/cookie.c:119:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t cookie_domain_len = strlen(cooke_domain);
./curl-83.40.2/curl/lib/cookie.c:120:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t hostname_len = strlen(hostname);
./curl-83.40.2/curl/lib/cookie.c:155:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  cookie_path_len = strlen(cookie_path);
./curl-83.40.2/curl/lib/cookie.c:169:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(0 == strlen(uri_path) || uri_path[0] != '/') {
./curl-83.40.2/curl/lib/cookie.c:185:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  uri_path_len = strlen(uri_path);
./curl-83.40.2/curl/lib/cookie.c:228:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(new_path);
./curl-83.40.2/curl/lib/cookie.c:421:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        size_t len=strlen(what);
./curl-83.40.2/curl/lib/cookie.c:422:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        const char *endofn = &ptr[ strlen(name) ];
./curl-83.40.2/curl/lib/cookie.c:972:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  l1 = c1->path ? strlen(c1->path) : 0;
./curl-83.40.2/curl/lib/cookie.c:973:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  l2 = c2->path ? strlen(c2->path) : 0;
./curl-83.40.2/curl/lib/cookie.c:979:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  l1 = c1->domain ? strlen(c1->domain) : 0;
./curl-83.40.2/curl/lib/cookie.c:980:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  l2 = c2->domain ? strlen(c2->domain) : 0;
./curl-83.40.2/curl/lib/curl_addrinfo.c:494:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  path_len = strlen(path);
./curl-83.40.2/curl/lib/curl_gethostname.c:69:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(name, force_hostname, namelen);
./curl-83.40.2/curl/lib/curl_gssapi.c:100:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(buf, sizeof(buf), "%s", prefix);
./curl-83.40.2/curl/lib/curl_gssapi.c:101:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(buf);
./curl-83.40.2/curl/lib/curl_gssapi.c:110:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf + len, sizeof(buf) - len,
./curl-83.40.2/curl/lib/curl_ntlm.c:74:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    header += strlen("NTLM");
./curl-83.40.2/curl/lib/curl_ntlm_core.c:428:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = CURLMIN(strlen(password), 14);
./curl-83.40.2/curl/lib/curl_ntlm_core.c:517:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(password);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:265:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(type2msg) && *type2msg != '=') {
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:523:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    userlen = strlen(user);
./curl-83.40.2/curl/lib/curl_ntlm_msgs.c:532:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    hostlen = strlen(host);
./curl-83.40.2/curl/lib/curl_ntlm_wb.c:261:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len_in = strlen(input), len_out = 0;
./curl-83.40.2/curl/lib/curl_sasl.c:84:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  result = Curl_convert_to_network(a, (char *)b, strlen((const char*)b)); \
./curl-83.40.2/curl/lib/curl_sasl.c:169:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf((char *)&dest[i*2], 3, "%02x", source[i]);
./curl-83.40.2/curl/lib/curl_sasl.c:220:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  find_pos += strlen(key);
./curl-83.40.2/curl/lib/curl_sasl.c:309:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  ulen = strlen(userp);
./curl-83.40.2/curl/lib/curl_sasl.c:310:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  plen = strlen(passwdp);
./curl-83.40.2/curl/lib/curl_sasl.c:353:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t vlen = strlen(valuep);
./curl-83.40.2/curl/lib/curl_sasl.c:414:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t chlg64len = strlen(chlg64);
./curl-83.40.2/curl/lib/curl_sasl.c:457:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    chlglen = strlen(chlg);
./curl-83.40.2/curl/lib/curl_sasl.c:462:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                        curlx_uztoui(strlen(passwdp)));
./curl-83.40.2/curl/lib/curl_sasl.c:521:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t chlg64len = strlen(chlg64);
./curl-83.40.2/curl/lib/curl_sasl.c:543:  [1] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant character.
    strcpy(realm, "");
./curl-83.40.2/curl/lib/curl_sasl.c:637:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(cnonce, sizeof(cnonce), "%08x%08x%08x%08x",
./curl-83.40.2/curl/lib/curl_sasl.c:646:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(userp)));
./curl-83.40.2/curl/lib/curl_sasl.c:649:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(realm)));
./curl-83.40.2/curl/lib/curl_sasl.c:652:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(passwdp)));
./curl-83.40.2/curl/lib/curl_sasl.c:662:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(nonce)));
./curl-83.40.2/curl/lib/curl_sasl.c:665:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(cnonce)));
./curl-83.40.2/curl/lib/curl_sasl.c:670:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(&HA1_hex[2 * i], 3, "%02x", digest[i]);
./curl-83.40.2/curl/lib/curl_sasl.c:686:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(method)));
./curl-83.40.2/curl/lib/curl_sasl.c:689:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(spn)));
./curl-83.40.2/curl/lib/curl_sasl.c:693:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(&HA2_hex[2 * i], 3, "%02x", digest[i]);
./curl-83.40.2/curl/lib/curl_sasl.c:706:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(nonce)));
./curl-83.40.2/curl/lib/curl_sasl.c:710:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(nonceCount)));
./curl-83.40.2/curl/lib/curl_sasl.c:713:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(cnonce)));
./curl-83.40.2/curl/lib/curl_sasl.c:716:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(qop)));
./curl-83.40.2/curl/lib/curl_sasl.c:723:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(&resp_hash_hex[2 * i], 3, "%02x", digest[i]);
./curl-83.40.2/curl/lib/curl_sasl.c:922:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(cnoncebuf, sizeof(cnoncebuf), "%08x%08x%08x%08x",
./curl-83.40.2/curl/lib/curl_sasl.c:926:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    result = Curl_base64_encode(data, cnoncebuf, strlen(cnoncebuf),
./curl-83.40.2/curl/lib/curl_sasl.c:1102:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  *outlen = strlen(response);
./curl-83.40.2/curl/lib/curl_sasl.c:1186:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  result = Curl_base64_encode(data, xoauth, strlen(xoauth), outptr, outlen);
./curl-83.40.2/curl/lib/curl_sasl.c:1478:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
       strlen(mech) + len > sasl->params->maxirlen) {
./curl-83.40.2/curl/lib/curl_sasl_gssapi.c:115:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    spn_token.length = strlen(spn);
./curl-83.40.2/curl/lib/curl_sasl_gssapi.c:132:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strlen(chlg64) && *chlg64 != '=') {
./curl-83.40.2/curl/lib/curl_sasl_gssapi.c:226:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(chlg64) && *chlg64 != '=') {
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:141:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(chlg64) && *chlg64 != '=') {
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:320:  [1] (buffer) _tcslen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          identity->DomainLength = curlx_uztoul(_tcslen(dup_domain.tchar_ptr));
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:361:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t chlglen = strlen(chlg);
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:479:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  chlg_buf[1].cbBuffer   = curlx_uztoul(strlen((const char *) request));
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:700:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(type2msg) && *type2msg != '=') {
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:944:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strlen(chlg64) && *chlg64 != '=') {
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1058:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(chlg64) && *chlg64 != '=') {
./curl-83.40.2/curl/lib/curl_sasl_sspi.c:1157:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  messagelen = sizeof(outdata) + strlen(user_name) + 1;
./curl-83.40.2/curl/lib/curl_setup_once.h:131:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
#define sread(x,y,z) (ssize_t)read((RECV_TYPE_ARG1)(x), \
./curl-83.40.2/curl/lib/curl_sspi.c:205:  [1] (buffer) _tcslen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  identity->UserLength = curlx_uztoul(_tcslen(dup_user.tchar_ptr));
./curl-83.40.2/curl/lib/curl_sspi.c:214:  [1] (buffer) _tcsncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
  _tcsncpy(dup_domain.tchar_ptr, domain.tchar_ptr, domlen);
./curl-83.40.2/curl/lib/curl_sspi.c:232:  [1] (buffer) _tcslen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  identity->PasswordLength = curlx_uztoul(_tcslen(dup_passwd.tchar_ptr));
./curl-83.40.2/curl/lib/dotdot.c:52:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t inlen = strlen(input);
./curl-83.40.2/curl/lib/dotdot.c:164:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    qlen = strlen(&input[oindex]);
./curl-83.40.2/curl/lib/easy.c:160:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(buf, sizeof(buf), "CHARSET=cp%u", cp);
./curl-83.40.2/curl/lib/escape.c:81:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t alloc = (inlength?(size_t)inlength:strlen(string))+1;
./curl-83.40.2/curl/lib/escape.c:123:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(&ns[strindex], 4, "%%%02X", in);
./curl-83.40.2/curl/lib/escape.c:148:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t alloc = (length?length:strlen(string))+1;
./curl-83.40.2/curl/lib/file.c:471:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(buf, sizeof(data->state.buffer),
./curl-83.40.2/curl/lib/file.c:491:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, BUFSIZE-1,
./curl-83.40.2/curl/lib/file.c:558:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    nread = read(fd, buf, bytestoread);
./curl-83.40.2/curl/lib/formdata.c:86:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    post->namelength = (long)(name?(namelength?namelength:strlen(name)):0);
./curl-83.40.2/curl/lib/formdata.c:196:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(strlen(filename) >= strlen(ctts[i].extension)) {
./curl-83.40.2/curl/lib/formdata.c:196:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(strlen(filename) >= strlen(ctts[i].extension)) {
./curl-83.40.2/curl/lib/formdata.c:198:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                    strlen(filename) - strlen(ctts[i].extension),
./curl-83.40.2/curl/lib/formdata.c:198:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                    strlen(filename) - strlen(ctts[i].extension),
./curl-83.40.2/curl/lib/formdata.c:644:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                     strlen(form->name)+1);
./curl-83.40.2/curl/lib/formdata.c:658:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                    strlen(form->value)+1);
./curl-83.40.2/curl/lib/formdata.c:822:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      length = strlen((char *)line);
./curl-83.40.2/curl/lib/formdata.c:1069:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    filename_escaped = malloc(strlen(filename)*2+1);
./curl-83.40.2/curl/lib/ftp.c:1005:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
     (strlen(data->set.str[STRING_FTPPORT]) > 1)) {
./curl-83.40.2/curl/lib/ftp.c:1008:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t addrlen = INET6_ADDRSTRLEN > strlen(string_ftpport) ?
./curl-83.40.2/curl/lib/ftp.c:1009:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      INET6_ADDRSTRLEN : strlen(string_ftpport);
./curl-83.40.2/curl/lib/ftp.c:1011:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t addrlen = INET_ADDRSTRLEN > strlen(string_ftpport) ?
./curl-83.40.2/curl/lib/ftp.c:1012:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      INET_ADDRSTRLEN : strlen(string_ftpport);
./curl-83.40.2/curl/lib/ftp.c:1028:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
        strncpy(addr, ip_start, ip_end - ip_start);
./curl-83.40.2/curl/lib/ftp.c:1048:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
        strncpy(addr, string_ftpport, ip_end - ip_start );
./curl-83.40.2/curl/lib/ftp.c:1307:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(dest, 20, ",%d,%d", (int)(port>>8), (int)(port&0xff));
./curl-83.40.2/curl/lib/ftp.c:1507:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(lstArg[strlen(lstArg) - 1] != '/')  {
./curl-83.40.2/curl/lib/ftp.c:2158:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(buf, sizeof(conn->data->state.buffer),
./curl-83.40.2/curl/lib/ftp.c:2182:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(buf, BUFSIZE-1,
./curl-83.40.2/curl/lib/ftp.c:2369:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, sizeof(data->state.buffer),
./curl-83.40.2/curl/lib/ftp.c:3297:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t flen = ftpc->file?strlen(ftpc->file):0; /* file is "raw" already */
./curl-83.40.2/curl/lib/ftp.c:3298:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t dlen = strlen(path)-flen;
./curl-83.40.2/curl/lib/ftp.c:4253:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
       (data->state.path[strlen(data->state.path) - 1] != '/') )
./curl-83.40.2/curl/lib/ftp.c:4401:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    dlen -= ftpc->file?curlx_uztosi(strlen(ftpc->file)):0;
./curl-83.40.2/curl/lib/ftp.c:4402:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((dlen == curlx_uztosi(strlen(ftpc->prevpath))) &&
./curl-83.40.2/curl/lib/gopher.c:90:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(path) <= 2)
./curl-83.40.2/curl/lib/gopher.c:102:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    j = strlen(newp);
./curl-83.40.2/curl/lib/gopher.c:116:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  k = curlx_uztosz(strlen(sel));
./curl-83.40.2/curl/lib/hostcheck.c:71:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(hostname);
./curl-83.40.2/curl/lib/hostcheck.c:74:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(pattern);
./curl-83.40.2/curl/lib/hostip.c:304:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  entry_len = strlen(entry_id);
./curl-83.40.2/curl/lib/hostip.c:389:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  entry_len = strlen(entry_id);
./curl-83.40.2/curl/lib/hostip.c:800:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      entry_len = strlen(entry_id);
./curl-83.40.2/curl/lib/hostip.c:820:  [1] (buffer) sscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
      if(3 != sscanf(hostp->data, "%255[^:]:%d:%255s", hostname, &port,
./curl-83.40.2/curl/lib/hostip.c:841:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      entry_len = strlen(entry_id);
./curl-83.40.2/curl/lib/hostip4.c:147:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(sbuf, sizeof(sbuf), "%d", port);
./curl-83.40.2/curl/lib/hostip6.c:206:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(sbuf, sizeof(sbuf), "%d", port);
./curl-83.40.2/curl/lib/http.c:196:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t thislen = strlen(thisheader);
./curl-83.40.2/curl/lib/http.c:220:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t thislen = strlen(thisheader);
./curl-83.40.2/curl/lib/http.c:314:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(data->state.buffer, sizeof(data->state.buffer), "%s:%s", user, pwd);
./curl-83.40.2/curl/lib/http.c:317:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                              data->state.buffer, strlen(data->state.buffer),
./curl-83.40.2/curl/lib/http.c:430:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        expectsend = (curl_off_t)strlen(data->set.postfields);
./curl-83.40.2/curl/lib/http.c:849:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                auth += strlen("NTLM");
./curl-83.40.2/curl/lib/http.c:1226:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    CURLcode result = Curl_add_buffer(in, s, strlen(s));
./curl-83.40.2/curl/lib/http.c:1311:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t hlen = strlen(header);
./curl-83.40.2/curl/lib/http.c:1339:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  clen = strlen(content); /* length of the word to find */
./curl-83.40.2/curl/lib/http.c:1718:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(buf, BUFSIZE-1,
./curl-83.40.2/curl/lib/http.c:1987:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        memmove(cookiehost, cookiehost + 1, strlen(cookiehost) - 1);
./curl-83.40.2/curl/lib/http.c:2053:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        size_t currlen = strlen(conn->host.dispname);
./curl-83.40.2/curl/lib/http.c:2054:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        size_t newlen = strlen(conn->host.name);
./curl-83.40.2/curl/lib/http.c:2055:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        size_t urllen = strlen(url);
./curl-83.40.2/curl/lib/http.c:2099:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          if(!*data->state.path && ppath[strlen(ppath) - 1] != '/') {
./curl-83.40.2/curl/lib/http.c:2102:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
          snprintf(p, sizeof(ftp_typecode) - 1, ";type=%c",
./curl-83.40.2/curl/lib/http.c:2268:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    result = Curl_add_buffer(req_buffer, ppath, strlen(ppath));
./curl-83.40.2/curl/lib/http.c:2569:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        (data->set.postfields? (curl_off_t)strlen(data->set.postfields):-1);
./curl-83.40.2/curl/lib/http.c:2776:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s)+1)) {
./curl-83.40.2/curl/lib/http.c:2814:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(CURLE_OK != Curl_convert_from_network(data, scratch, strlen(s)+1)) {
./curl-83.40.2/curl/lib/http.c:3260:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
      strncpy(&scratch[0], k->p, SCRATCHSIZE);
./curl-83.40.2/curl/lib/http.c:3422:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    result = Curl_convert_from_network(data, k->p, strlen(k->p));
./curl-83.40.2/curl/lib/http.c:3665:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      k->timeofdoc = curl_getdate(k->p+strlen("Last-Modified:"),
./curl-83.40.2/curl/lib/http2.c:170:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(p, len, " nghttp2/%s", h2->version_str);
./curl-83.40.2/curl/lib/http2.c:1069:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  nva[0].namelen = (uint16_t)strlen((char *)nva[0].name);
./curl-83.40.2/curl/lib/http2.c:1078:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  nva[1].namelen = (uint16_t)strlen((char *)nva[1].name);
./curl-83.40.2/curl/lib/http2.c:1084:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  nva[2].namelen = (uint16_t)strlen((char *)nva[2].name);
./curl-83.40.2/curl/lib/http2.c:1089:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  nva[2].valuelen = (uint16_t)strlen((char *)nva[2].value);
./curl-83.40.2/curl/lib/http2.c:1103:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      nva[i].namelen = (uint16_t)strlen((char *)nva[i].name);
./curl-83.40.2/curl/lib/http_digest.c:64:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  header += strlen("Digest");
./curl-83.40.2/curl/lib/http_negotiate.c:74:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    spn_token.length = strlen(spn);
./curl-83.40.2/curl/lib/http_negotiate.c:91:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  header += strlen("Negotiate");
./curl-83.40.2/curl/lib/http_negotiate.c:95:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(header);
./curl-83.40.2/curl/lib/http_negotiate_sspi.c:121:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  header += strlen("Negotiate");
./curl-83.40.2/curl/lib/http_negotiate_sspi.c:125:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(header);
./curl-83.40.2/curl/lib/http_proxy.c:473:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                         strlen("Content-Length:"), NULL, 10);
./curl-83.40.2/curl/lib/if2ip.c:170:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
                snprintf(scope, sizeof(scope), "%%%u", scopeid);
./curl-83.40.2/curl/lib/if2ip.c:177:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
            snprintf(buf, buf_size, "%s%s", ip, scope);
./curl-83.40.2/curl/lib/if2ip.c:221:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(interf);
./curl-83.40.2/curl/lib/imap.c:249:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t cmd_len = strlen(cmd);
./curl-83.40.2/curl/lib/imap.c:290:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t id_len = strlen(id);
./curl-83.40.2/curl/lib/imap.c:400:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  for(len = strlen(message); len--;)
./curl-83.40.2/curl/lib/imap.c:1025:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(line);
./curl-83.40.2/curl/lib/imap.c:1254:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(line);
./curl-83.40.2/curl/lib/imap.c:1459:  [1] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant character.
  strcpy(imapc->resptag, "*");
./curl-83.40.2/curl/lib/imap.c:1790:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(imapc->resptag, sizeof(imapc->resptag), "%c%03d",
./curl-83.40.2/curl/lib/imap.c:1849:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  newlen = strlen(str) + backsp_count + quote_count + (space_exists ? 2 : 0);
./curl-83.40.2/curl/lib/inet_ntop.c:59:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  (void)snprintf(tmp, sizeof(tmp), "%d.%d.%d.%d",
./curl-83.40.2/curl/lib/inet_ntop.c:65:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(tmp);
./curl-83.40.2/curl/lib/inet_ntop.c:149:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      tp += strlen(tp);
./curl-83.40.2/curl/lib/inet_ntop.c:152:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    tp += snprintf(tp, 5, "%lx", words[i]);
./curl-83.40.2/curl/lib/krb5.c:197:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    input_buffer.length = snprintf(input_buffer.value, BUFSIZE, "%s@%s",
./curl-83.40.2/curl/lib/ldap.c:463:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      name_len = strlen(name);
./curl-83.40.2/curl/lib/ldap.c:523:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      attr_len = strlen(attr);
./curl-83.40.2/curl/lib/md5.c:513:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  MD5_Update(&ctx, input, curlx_uztoui(strlen((char *)input)));
./curl-83.40.2/curl/lib/memdebug.c:232:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len=strlen(str)+1;
./curl-83.40.2/curl/lib/memdebug.c:256:  [1] (buffer) wcslen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  wsiz = wcslen(str) + 1;
./curl-83.40.2/curl/lib/mprintf.c:810:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          len = strlen(str);
./curl-83.40.2/curl/lib/mprintf.c:868:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        size_t left = sizeof(formatbuf)-strlen(formatbuf);
./curl-83.40.2/curl/lib/openldap.c:203:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(ptr, sizeof(hosturl)-(ptr-hosturl), "://%s:%d",
./curl-83.40.2/curl/lib/openldap.c:268:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      passwd.bv_len = strlen(passwd.bv_val);
./curl-83.40.2/curl/lib/parsedate.c:358:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        len = strlen(buf);
./curl-83.40.2/curl/lib/pingpong.c:188:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  write_len = strlen(s);
./curl-83.40.2/curl/lib/pipeline.c:273:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                           strlen(bl_server_name))) {
./curl-83.40.2/curl/lib/pop3.c:293:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  for(len = strlen(message); len--;)
./curl-83.40.2/curl/lib/pop3.c:468:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(pop3c->apoptimestamp)));
./curl-83.40.2/curl/lib/pop3.c:471:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                  curlx_uztoui(strlen(conn->passwd)));
./curl-83.40.2/curl/lib/pop3.c:478:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(&secret[2 * i], 3, "%02x", digest[i]);
./curl-83.40.2/curl/lib/pop3.c:647:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(line);
./curl-83.40.2/curl/lib/pop3.c:698:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(line);
./curl-83.40.2/curl/lib/progress.c:52:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(r, 9, "%3" CURL_FORMAT_CURL_OFF_T
./curl-83.40.2/curl/lib/progress.c:55:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(r, 9, "%7" CURL_FORMAT_CURL_OFF_T "d", d);
./curl-83.40.2/curl/lib/progress.c:74:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "k", bytes/ONE_KILOBYTE);
./curl-83.40.2/curl/lib/progress.c:78:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%2" CURL_FORMAT_CURL_OFF_T ".%0"
./curl-83.40.2/curl/lib/progress.c:86:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "M", bytes/ONE_MEGABYTE);
./curl-83.40.2/curl/lib/progress.c:90:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%2" CURL_FORMAT_CURL_OFF_T ".%0"
./curl-83.40.2/curl/lib/progress.c:96:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "G", bytes/ONE_GIGABYTE);
./curl-83.40.2/curl/lib/progress.c:100:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "T", bytes/ONE_TERABYTE);
./curl-83.40.2/curl/lib/progress.c:104:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "P", bytes/ONE_PETABYTE);
./curl-83.40.2/curl/lib/progress.c:112:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(max5, 6, "%4" CURL_FORMAT_CURL_OFF_T "M", bytes/ONE_MEGABYTE);
./curl-83.40.2/curl/lib/rawstr.h:42:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
#define checkprefix(a,b)    Curl_raw_nequal(a,b,strlen(a))
./curl-83.40.2/curl/lib/rtsp.c:500:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        (data->set.postfields? (curl_off_t)strlen(data->set.postfields):0);
./curl-83.40.2/curl/lib/rtsp.c:773:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                 strlen(data->set.str[STRING_RTSP_SESSION_ID]))  != 0) {
./curl-83.40.2/curl/lib/security.c:239:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
      return read(fd, buffer, len);
./curl-83.40.2/curl/lib/sendf.c:134:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    len = strlen(print_buffer);
./curl-83.40.2/curl/lib/sendf.c:152:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(data->set.errorbuffer, CURL_ERROR_SIZE, "%s", data->state.buffer);
./curl-83.40.2/curl/lib/sendf.c:156:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    len = strlen(data->state.buffer);
./curl-83.40.2/curl/lib/sendf.c:185:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  write_len = strlen(s);
./curl-83.40.2/curl/lib/sendf.c:493:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    len = strlen(ptr);
./curl-83.40.2/curl/lib/sendf.c:701:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buffer, sizeof(buffer), "[%s %s %s]", w, t,
./curl-83.40.2/curl/lib/sendf.c:703:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      rc = showit(data, CURLINFO_TEXT, buffer, strlen(buffer));
./curl-83.40.2/curl/lib/smb.c:122:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  p += strlen(str);
./curl-83.40.2/curl/lib/smb.c:127:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  p += strlen(str) + 1;
./curl-83.40.2/curl/lib/smb.c:435:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  byte_count += strlen(smbc->user) + strlen(smbc->domain);
./curl-83.40.2/curl/lib/smb.c:435:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  byte_count += strlen(smbc->user) + strlen(smbc->domain);
./curl-83.40.2/curl/lib/smb.c:436:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  byte_count += strlen(OS) + strlen(CLIENTNAME) + 4; /* 4 null chars */
./curl-83.40.2/curl/lib/smb.c:436:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  byte_count += strlen(OS) + strlen(CLIENTNAME) + 4; /* 4 null chars */
./curl-83.40.2/curl/lib/smb.c:480:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t byte_count = strlen(conn->host.name) + strlen(req->share);
./curl-83.40.2/curl/lib/smb.c:480:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t byte_count = strlen(conn->host.name) + strlen(req->share);
./curl-83.40.2/curl/lib/smb.c:481:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  byte_count += strlen(SERVICENAME) + 5; /* 2 nulls and 3 backslashes */
./curl-83.40.2/curl/lib/smb.c:507:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if((strlen(req->path) + 1) > sizeof(msg.bytes))
./curl-83.40.2/curl/lib/smb.c:513:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  byte_count = strlen(req->path);
./curl-83.40.2/curl/lib/smtp.c:289:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  for(len = strlen(message); len--;)
./curl-83.40.2/curl/lib/smtp.c:713:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(line);
./curl-83.40.2/curl/lib/smtp.c:857:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(line);
./curl-83.40.2/curl/lib/socks.c:204:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t plen = strlen(proxy_name);
./curl-83.40.2/curl/lib/socks.c:221:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      (int)strlen((char*)socksreq + 8); /* size including NUL */
./curl-83.40.2/curl/lib/socks.c:230:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      hostnamelen = (ssize_t)strlen(hostname) + 1; /* length including NUL */
./curl-83.40.2/curl/lib/socks.c:247:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      hostnamelen = (ssize_t)strlen(hostname) + 1;
./curl-83.40.2/curl/lib/socks.c:380:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  const size_t hostname_len = strlen(hostname);
./curl-83.40.2/curl/lib/socks.c:486:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      proxy_name_len = strlen(proxy_name);
./curl-83.40.2/curl/lib/socks.c:487:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      proxy_password_len = strlen(proxy_password);
./curl-83.40.2/curl/lib/socks_gssapi.c:135:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service.value = malloc(strlen(serviceptr));
./curl-83.40.2/curl/lib/socks_gssapi.c:138:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service.length = strlen(serviceptr);
./curl-83.40.2/curl/lib/socks_gssapi.c:145:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service.value = malloc(strlen(serviceptr) +strlen(conn->proxy.name)+2);
./curl-83.40.2/curl/lib/socks_gssapi.c:145:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service.value = malloc(strlen(serviceptr) +strlen(conn->proxy.name)+2);
./curl-83.40.2/curl/lib/socks_gssapi.c:148:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service.length = strlen(serviceptr) +strlen(conn->proxy.name)+1;
./curl-83.40.2/curl/lib/socks_gssapi.c:148:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service.length = strlen(serviceptr) +strlen(conn->proxy.name)+1;
./curl-83.40.2/curl/lib/socks_gssapi.c:149:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(service.value, service.length+1, "%s@%s",
./curl-83.40.2/curl/lib/socks_sspi.c:98:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service_name = malloc(strlen(service));
./curl-83.40.2/curl/lib/socks_sspi.c:101:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    memcpy(service_name, service, strlen(service));
./curl-83.40.2/curl/lib/socks_sspi.c:104:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service_name = malloc(strlen(service) + strlen(conn->proxy.name) + 2);
./curl-83.40.2/curl/lib/socks_sspi.c:104:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    service_name = malloc(strlen(service) + strlen(conn->proxy.name) + 2);
./curl-83.40.2/curl/lib/socks_sspi.c:107:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(service_name, strlen(service) +strlen(conn->proxy.name)+2,
./curl-83.40.2/curl/lib/socks_sspi.c:107:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    snprintf(service_name, strlen(service) +strlen(conn->proxy.name)+2,
./curl-83.40.2/curl/lib/socks_sspi.c:107:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    snprintf(service_name, strlen(service) +strlen(conn->proxy.name)+2,
./curl-83.40.2/curl/lib/ssh.c:107:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        libssh2_sftp_symlink_ex((s), (p), curlx_uztoui(strlen(p)), \
./curl-83.40.2/curl/lib/ssh.c:228:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    responses[0].length = curlx_uztoui(strlen(conn->passwd));
./curl-83.40.2/curl/lib/ssh.c:432:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      size_t homelen = strlen(homedir);
./curl-83.40.2/curl/lib/ssh.c:662:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(&md5buffer[i*2], 3, "%02x", (unsigned char) fingerprint[i]);
./curl-83.40.2/curl/lib/ssh.c:669:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(pubkey_md5 && strlen(pubkey_md5) == 32) {
./curl-83.40.2/curl/lib/ssh.c:767:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                             curlx_uztoui(strlen(conn->user)));
./curl-83.40.2/curl/lib/ssh.c:888:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                                    strlen(conn->user)),
./curl-83.40.2/curl/lib/ssh.c:924:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                        curlx_uztoui(strlen(conn->user)),
./curl-83.40.2/curl/lib/ssh.c:926:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                        curlx_uztoui(strlen(conn->passwd)),
./curl-83.40.2/curl/lib/ssh.c:1060:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                                      strlen(conn->user)),
./curl-83.40.2/curl/lib/ssh.c:1228:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          Curl_debug(data, CURLINFO_HEADER_IN, tmp, strlen(tmp), conn);
./curl-83.40.2/curl/lib/ssh.c:1233:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        result = Curl_client_write(conn, CLIENTWRITE_HEADER, tmp, strlen(tmp));
./curl-83.40.2/curl/lib/ssh.c:1414:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                  curlx_uztoui(strlen(sshc->quote_path2)),
./curl-83.40.2/curl/lib/ssh.c:1485:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                curlx_uztoui(strlen(sshc->quote_path2)),
./curl-83.40.2/curl/lib/ssh.c:1507:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                   curlx_uztoui(strlen(sshc->quote_path1)),
./curl-83.40.2/curl/lib/ssh.c:1509:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                   curlx_uztoui(strlen(sshc->quote_path2)),
./curl-83.40.2/curl/lib/ssh.c:1530:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                 curlx_uztoui(strlen(sshc->quote_path1)),
./curl-83.40.2/curl/lib/ssh.c:1549:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                  curlx_uztoui(strlen(sshc->quote_path1)),
./curl-83.40.2/curl/lib/ssh.c:1551:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                  curlx_uztoui(strlen(sshc->quote_path2)),
./curl-83.40.2/curl/lib/ssh.c:1574:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                 curlx_uztoui(strlen(sshc->quote_path1)));
./curl-83.40.2/curl/lib/ssh.c:1592:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                  curlx_uztoui(strlen(sshc->quote_path1)));
./curl-83.40.2/curl/lib/ssh.c:1612:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(sftp_scp->path[strlen(sftp_scp->path)-1] == '/')
./curl-83.40.2/curl/lib/ssh.c:1633:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                    curlx_uztoui(strlen(sftp_scp->path)),
./curl-83.40.2/curl/lib/ssh.c:1664:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                             curlx_uztoui(strlen(sftp_scp->path)),
./curl-83.40.2/curl/lib/ssh.c:1693:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                   (strlen(sftp_scp->path) > 1))) {
./curl-83.40.2/curl/lib/ssh.c:1798:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(strlen(sftp_scp->path) > 1) {
./curl-83.40.2/curl/lib/ssh.c:1824:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                 curlx_uztoui(strlen(sftp_scp->path)),
./curl-83.40.2/curl/lib/ssh.c:1864:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                                 strlen(sftp_scp->path)),
./curl-83.40.2/curl/lib/ssh.c:1938:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          sshc->readdir_currLen = (int)strlen(sshc->readdir_longentry);
./curl-83.40.2/curl/lib/ssh.c:1963:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
            snprintf(sshc->readdir_linkPath, PATH_MAX, "%s%s", sftp_scp->path,
./curl-83.40.2/curl/lib/ssh.c:1996:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                curlx_uztoui(strlen(sshc->readdir_linkPath)),
./curl-83.40.2/curl/lib/ssh.c:2018:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      sshc->readdir_currLen += snprintf(sshc->readdir_line +
./curl-83.40.2/curl/lib/ssh.c:2029:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      sshc->readdir_currLen += snprintf(sshc->readdir_line +
./curl-83.40.2/curl/lib/ssh.c:2075:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                             curlx_uztoui(strlen(sftp_scp->path)),
./curl-83.40.2/curl/lib/ssh.c:2102:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                                curlx_uztoui(strlen(sftp_scp->path)),
./curl-83.40.2/curl/lib/ssh.c:3220:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  *path = malloc(strlen(cp) + 1);
./curl-83.40.2/curl/lib/ssh.c:3229:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    for(i = j = 0; i <= strlen(cp); i++) {
./curl-83.40.2/curl/lib/strdup.c:38:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(str);
./curl-83.40.2/curl/lib/strerror.c:605:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
  strncpy (buf, p, len);
./curl-83.40.2/curl/lib/strerror.c:649:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(buf, strerror(err), max);
./curl-83.40.2/curl/lib/strerror.c:654:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, max, "Unknown error %d (%#x)", err, err);
./curl-83.40.2/curl/lib/strerror.c:668:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, max, "Unknown error %d", err);
./curl-83.40.2/curl/lib/strerror.c:680:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
      strncpy(buf, msg, max);
./curl-83.40.2/curl/lib/strerror.c:682:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, max, "Unknown error %d", err);
./curl-83.40.2/curl/lib/strerror.c:692:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
      strncpy(buf, buffer, max);
./curl-83.40.2/curl/lib/strerror.c:694:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, max, "Unknown error %d", err);
./curl-83.40.2/curl/lib/strerror.c:700:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
      strncpy(buf, msg, max);
./curl-83.40.2/curl/lib/strerror.c:702:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, max, "Unknown error %d", err);
./curl-83.40.2/curl/lib/strerror.c:781:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf, max, "error %d", err);
./curl-83.40.2/curl/lib/strerror.c:792:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(buf, str, max);
./curl-83.40.2/curl/lib/strerror.c:1069:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(outbuf, txt, outmax);
./curl-83.40.2/curl/lib/strerror.c:1071:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(outbuf, outmax,
./curl-83.40.2/curl/lib/strerror.c:1078:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(txtbuf, sizeof(txtbuf), "%s (0x%04X%04X)",
./curl-83.40.2/curl/lib/strerror.c:1113:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(outbuf, outmax, "%s - %s", str, msg);
./curl-83.40.2/curl/lib/strerror.c:1115:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
      strncpy(outbuf, str, outmax);
./curl-83.40.2/curl/lib/strerror.c:1128:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
  strncpy(outbuf, txt, outmax);
./curl-83.40.2/curl/lib/telnet.c:832:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(option_arg, sizeof(option_arg), "USER,%s", conn->user);
./curl-83.40.2/curl/lib/telnet.c:844:  [1] (buffer) sscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
    if(sscanf(head->data, "%127[^= ]%*[ =]%255s",
./curl-83.40.2/curl/lib/telnet.c:849:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
        strncpy(tn->subopt_ttype, option_arg, 31);
./curl-83.40.2/curl/lib/telnet.c:857:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
        strncpy(tn->subopt_xdisploc, option_arg, 127);
./curl-83.40.2/curl/lib/telnet.c:940:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      len = strlen(tn->subopt_ttype) + 4 + 2;
./curl-83.40.2/curl/lib/telnet.c:941:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf((char *)temp, sizeof(temp),
./curl-83.40.2/curl/lib/telnet.c:952:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      len = strlen(tn->subopt_xdisploc) + 4 + 2;
./curl-83.40.2/curl/lib/telnet.c:953:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf((char *)temp, sizeof(temp),
./curl-83.40.2/curl/lib/telnet.c:964:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf((char *)temp, sizeof(temp),
./curl-83.40.2/curl/lib/telnet.c:970:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        tmplen = (strlen(v->data) + 1);
./curl-83.40.2/curl/lib/telnet.c:973:  [1] (buffer) sscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
          if(sscanf(v->data, "%127[^,],%127s", varname, varval)) {
./curl-83.40.2/curl/lib/telnet.c:974:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
            snprintf((char *)&temp[len], sizeof(temp) - len,
./curl-83.40.2/curl/lib/telnet.c:981:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf((char *)&temp[len], sizeof(temp) - len,
./curl-83.40.2/curl/lib/telnet.c:1626:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
          nread = read(pfd[1].fd, buf, BUFSIZE - 1);
./curl-83.40.2/curl/lib/tftp.c:327:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  *value = &buf[strlen(*option) + 1];
./curl-83.40.2/curl/lib/tftp.c:408:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(( strlen(option) + csize + 1 ) > (size_t)state->blksize)
./curl-83.40.2/curl/lib/tftp.c:411:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  return strlen(option) + 1;
./curl-83.40.2/curl/lib/tftp.c:492:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf((char *)state->spacket.data+2,
./curl-83.40.2/curl/lib/tftp.c:495:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    sbytes = 4 + strlen(filename) + strlen(mode);
./curl-83.40.2/curl/lib/tftp.c:495:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    sbytes = 4 + strlen(filename) + strlen(mode);
./curl-83.40.2/curl/lib/tftp.c:502:  [1] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant character.
      strcpy(buf, "0"); /* the destination is large enough */
./curl-83.40.2/curl/lib/tftp.c:510:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf( buf, sizeof(buf), "%d", state->requested_blksize );
./curl-83.40.2/curl/lib/tftp.c:518:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf( buf, sizeof(buf), "%d", state->retry_time);
./curl-83.40.2/curl/lib/transfer.c:188:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    hexlen = snprintf(hexbuffer, sizeof(hexbuffer),
./curl-83.40.2/curl/lib/transfer.c:201:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
           strlen(endofline_network));
./curl-83.40.2/curl/lib/transfer.c:212:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      length = strlen(hexbuffer);
./curl-83.40.2/curl/lib/transfer.c:224:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    nread+=(int)strlen(endofline_native); /* for the added end of line */
./curl-83.40.2/curl/lib/transfer.c:1586:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  urllen = strlen(url_clone);
./curl-83.40.2/curl/lib/url.c:327:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    result = parse_login_details(option, strlen(option),
./curl-83.40.2/curl/lib/url.c:2607:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strnequal((char *)va_arg(param, char *), "SRP", strlen("SRP")))
./curl-83.40.2/curl/lib/url.c:3695:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(host->name);
./curl-83.40.2/curl/lib/url.c:3962:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      memmove(path, path + 2, strlen(path + 2)+1);
./curl-83.40.2/curl/lib/url.c:3995:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        memmove(path, ptr, strlen(ptr)+1);
./curl-83.40.2/curl/lib/url.c:4079:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t hostlen = strlen(query);
./curl-83.40.2/curl/lib/url.c:4080:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t pathlen = strlen(path);
./curl-83.40.2/curl/lib/url.c:4096:  [1] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused). Risk
  is low because the source is a constant character.
    strcpy(path, "/");
./curl-83.40.2/curl/lib/url.c:4108:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    memmove(&path[1], path, strlen(path)+1);
./curl-83.40.2/curl/lib/url.c:4138:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t plen = strlen(path); /* new path, should be 1 byte longer than
./curl-83.40.2/curl/lib/url.c:4140:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t urllen = strlen(data->change.url); /* original URL length */
./curl-83.40.2/curl/lib/url.c:4142:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t prefixlen = strlen(conn->host.name);
./curl-83.40.2/curl/lib/url.c:4145:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      prefixlen += strlen(protop) + strlen("://");
./curl-83.40.2/curl/lib/url.c:4145:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      prefixlen += strlen(protop) + strlen("://");
./curl-83.40.2/curl/lib/url.c:4194:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        memmove(percent, endp, strlen(endp)+1);
./curl-83.40.2/curl/lib/url.c:4203:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
        strncpy(ifname, percent + identifier_offset, IFNAMSIZ + 2);
./curl-83.40.2/curl/lib/url.c:4217:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          char *p = percent + identifier_offset + strlen(ifname);
./curl-83.40.2/curl/lib/url.c:4220:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          memmove(percent, p, strlen(p) + 1);
./curl-83.40.2/curl/lib/url.c:4381:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    no_proxy_len = strlen(no_proxy);
./curl-83.40.2/curl/lib/url.c:4386:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      namelen = strlen(name);
./curl-83.40.2/curl/lib/url.c:4568:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(proxyuser && strlen(proxyuser) < MAX_CURL_USER_LENGTH)
./curl-83.40.2/curl/lib/url.c:4577:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(proxypasswd && strlen(proxypasswd) < MAX_CURL_PASSWORD_LENGTH)
./curl-83.40.2/curl/lib/url.c:4678:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(proxyuser, data->set.str[STRING_PROXYUSERNAME],
./curl-83.40.2/curl/lib/url.c:4683:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(proxypasswd, data->set.str[STRING_PROXYPASSWORD],
./curl-83.40.2/curl/lib/url.c:5004:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(type, sizeof(type), ";type=%c",
./curl-83.40.2/curl/lib/url.c:5200:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(strlen(path) >= sizeof(((struct sockaddr_un *)0)->sun_path)) {
./curl-83.40.2/curl/lib/url.c:5399:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  urllen=strlen(data->change.url);
./curl-83.40.2/curl/lib/version.c:71:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(ptr);
./curl-83.40.2/curl/lib/version.c:86:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  len = snprintf(ptr, left, " zlib/%s", zlibVersion());
./curl-83.40.2/curl/lib/version.c:92:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  len = snprintf(ptr, left, " c-ares/%s", ares_version(NULL));
./curl-83.40.2/curl/lib/version.c:98:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    len = snprintf(ptr, left, " libidn/%s", stringprep_check_version(NULL));
./curl-83.40.2/curl/lib/version.c:104:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  len = snprintf(ptr, left, " WinIDN");
./curl-83.40.2/curl/lib/version.c:110:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  len = snprintf(ptr, left, " iconv/%d.%d",
./curl-83.40.2/curl/lib/version.c:114:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  len = snprintf(ptr, left, " iconv");
./curl-83.40.2/curl/lib/version.c:120:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  len = snprintf(ptr, left, " libssh2/%s", CURL_LIBSSH2_VERSION);
./curl-83.40.2/curl/lib/version.c:139:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(ptr, left, " librtmp/%d.%d%s",
./curl-83.40.2/curl/lib/version.c:355:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(ssh_buffer, sizeof(ssh_buffer), "libssh2/%s", LIBSSH2_VERSION);
./curl-83.40.2/curl/lib/vtls/axtls.c:496:  [1] (obsolete) usleep:
  This C routine is considered obsolete (as opposed to the shell command
  by the same name).   The interaction of this function with SIGALRM and
  other timer functions such as sleep(), alarm(), setitimer(), and
  nanosleep() is unspecified. Use nanosleep(2) or setitimer(2) instead. 
    usleep(10000);
./curl-83.40.2/curl/lib/vtls/axtls.c:670:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "axTLS/%s", ssl_version());
./curl-83.40.2/curl/lib/vtls/cyassl.c:261:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t hostname_len = strlen(conn->host.name);
./curl-83.40.2/curl/lib/vtls/cyassl.c:579:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "wolfSSL/%s", WOLFSSL_VERSION);
./curl-83.40.2/curl/lib/vtls/cyassl.c:581:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "CyaSSL/%s", CYASSL_VERSION);
./curl-83.40.2/curl/lib/vtls/cyassl.c:583:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "CyaSSL/%s", "<1.8.8");
./curl-83.40.2/curl/lib/vtls/darwinssl.c:139:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    rrtn = read(sock, currData, bytesToGo);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:860:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  attr.length = (UInt32)strlen(label);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:940:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    (const UInt8 *)cPath, strlen(cPath), false);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1205:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        strlen(data->set.str[STRING_CERT_TYPE])) != 0)
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1345:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    strlen(conn->host.name));
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1490:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    ssl_sessionid_len = strlen(ssl_sessionid);
./curl-83.40.2/curl/lib/vtls/darwinssl.c:1592:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    n = read(fd, buf, sizeof(buf));
./curl-83.40.2/curl/lib/vtls/darwinssl.c:2271:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    nread = read(conn->sock[sockindex], buf, sizeof(buf));
./curl-83.40.2/curl/lib/vtls/darwinssl.c:2300:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "SecureTransport");
./curl-83.40.2/curl/lib/vtls/gskit.c:319:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  l = strlen(cipherlist) + 1;
./curl-83.40.2/curl/lib/vtls/gskit.c:355:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          ciphers[i].ptr += strlen(ctp->gsktoken);
./curl-83.40.2/curl/lib/vtls/gskit.c:1024:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    nread = read(conn->sock[sockindex], buf, sizeof(buf));
./curl-83.40.2/curl/lib/vtls/gskit.c:1043:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. Risk is low because the source is a constant string.
  strncpy(buffer, "GSKit", size);
./curl-83.40.2/curl/lib/vtls/gskit.c:1044:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  return strlen(buffer);
./curl-83.40.2/curl/lib/vtls/gtls.c:213:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(data->state.buffer,
./curl-83.40.2/curl/lib/vtls/gtls.c:520:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                             strlen(conn->host.name)) < 0))
./curl-83.40.2/curl/lib/vtls/gtls.c:1498:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "GnuTLS/%s", gnutls_check_version(NULL));
./curl-83.40.2/curl/lib/vtls/nss.c:367:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                strlen(filename) + 1);
./curl-83.40.2/curl/lib/vtls/nss.c:2007:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "NSS/%s", NSS_VERSION);
./curl-83.40.2/curl/lib/vtls/openssl.c:153:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    int klen = curlx_uztosi(strlen((char *)global_passwd));
./curl-83.40.2/curl/lib/vtls/openssl.c:1049:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(buf, sizeofbuf,
./curl-83.40.2/curl/lib/vtls/openssl.c:1142:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          if((altlen == strlen(altptr)) &&
./curl-83.40.2/curl/lib/vtls/openssl.c:1218:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(peer_CN && (curlx_uztosi(strlen((char *)peer_CN)) != j)) {
./curl-83.40.2/curl/lib/vtls/openssl.c:1231:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      CURLcode rc = Curl_convert_from_utf8(data, peer_CN, strlen(peer_CN));
./curl-83.40.2/curl/lib/vtls/openssl.c:1524:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(unknown, sizeof(unknown), "(%x)", ssl_ver);
./curl-83.40.2/curl/lib/vtls/openssl.c:1546:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    txt_len = snprintf(ssl_buf, sizeof(ssl_buf), "%s (%s), %s, %s (%d):\n",
./curl-83.40.2/curl/lib/vtls/openssl.c:2163:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
          snprintf(error_buffer, sizeof(error_buffer),
./curl-83.40.2/curl/lib/vtls/openssl.c:2268:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(namebuf, sizeof(namebuf), "%s(%s)", type, name);
./curl-83.40.2/curl/lib/vtls/openssl.c:2270:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(ptr, left, "%02x:", raw[i]);
./curl-83.40.2/curl/lib/vtls/openssl.c:2339:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        ptr+=snprintf(ptr, sizeof(buf)-(ptr-buf), "%s%c", sep,
./curl-83.40.2/curl/lib/vtls/openssl.c:2362:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    ptr+=snprintf(ptr, sizeof(buf)-(ptr-buf), "%02x:", sig->data[i]);
./curl-83.40.2/curl/lib/vtls/openssl.c:2449:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(bufp, CERTBUFFERSIZE, "%lx", value);
./curl-83.40.2/curl/lib/vtls/openssl.c:2463:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(ptr, left, "%02x", num->data[j]);
./curl-83.40.2/curl/lib/vtls/openssl.c:2507:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(bufp, CERTBUFFERSIZE, "%d", BN_num_bits(pubkey->pkey.rsa->n));
./curl-83.40.2/curl/lib/vtls/openssl.c:3081:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "yassl/%s", YASSL_VERSION);
./curl-83.40.2/curl/lib/vtls/openssl.c:3084:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "BoringSSL");
./curl-83.40.2/curl/lib/vtls/openssl.c:3114:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    return snprintf(buffer, size, "%s/%lx.%lx.%lx%s",
./curl-83.40.2/curl/lib/vtls/openssl.c:3129:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "OpenSSL/%lx.%lx.%lx",
./curl-83.40.2/curl/lib/vtls/openssl.c:3144:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    return snprintf(buffer, size, "SSL/%x.%x.%x%s",
./curl-83.40.2/curl/lib/vtls/polarssl.c:596:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  return snprintf(buffer, size, "%s/%d.%d.%d",
./curl-83.40.2/curl/lib/vtls/schannel.c:1335:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  size = snprintf(buffer, size, "WinSSL");
./curl-83.40.2/curl/lib/vtls/schannel.c:1436:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        int hostname_len = strlen(conn->host.name);
./curl-83.40.2/curl/lib/vtls/vtls.c:194:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      size_t elen = strlen(force_entropy);
./curl-83.40.2/curl/lib/vtls/vtls.c:219:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
      ssize_t nread = read(fd, &randseed, sizeof(randseed));
./curl-83.40.2/curl/lib/vtls/vtls.c:658:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t labellen = strlen(label);
./curl-83.40.2/curl/lib/vtls/vtls.c:666:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(output, outlen, "%s:", label);
./curl-83.40.2/curl/lib/vtls/vtls.c:694:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t valuelen = strlen(value);
./curl-83.40.2/curl/lib/warnless.c:426:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
  return (ssize_t)read(fd, buf, curlx_uztoui(count));
./curl-83.40.2/curl/lib/warnless.h:72:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
#  undef  read
./curl-83.40.2/curl/lib/warnless.h:73:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
#  define read(fd, buf, count)  curlx_read(fd, buf, count)
./curl-83.40.2/curl/lib/x509asn1.c:208:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buf + n, 4, "%02x:", *(const unsigned char *) beg++);
./curl-83.40.2/curl/lib/x509asn1.c:1117:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            if(strlen(dnsname) == (size_t) len)
./curl-83.40.2/curl/lib/x509asn1.c:1172:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strlen(dnsname) != (size_t) len)         /* Nul byte in string ? */
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:129:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    lslen = slen >= 0? slen: strlen(s) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:174:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  dlen = (size_t) (slen < 0? strlen(s): slen) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:246:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = strlen(aversion) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:318:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    *outlength = strlen(s);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:428:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      n += strlen(p->protocols[nproto++]);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:434:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->version) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:437:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->host) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:440:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->ssl_version) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:443:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->libz_version) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:446:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->ares) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:449:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->libidn) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:452:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    n += strlen(p->libssh_version) + 1;
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:524:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = MAX_CONV_EXPANSION * (strlen(s) + 1);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:549:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = MAX_CONV_EXPANSION * (strlen(s) + 1);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:574:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = MAX_CONV_EXPANSION * (strlen(s) + 1);
./curl-83.40.2/curl/packages/OS400/ccsidcurl.c:747:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    l = strlen(forms[formx].value) + 1;
./curl-83.40.2/curl/packages/OS400/os400sys.c:249:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = strlen(s) + 1;
./curl-83.40.2/curl/packages/OS400/os400sys.c:292:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        nodenamelen - 1, strlen(enodename));
./curl-83.40.2/curl/packages/OS400/os400sys.c:298:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        servnamelen - 1, strlen(eservname));
./curl-83.40.2/curl/packages/OS400/os400sys.c:324:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    i = strlen(nodename);
./curl-83.40.2/curl/packages/OS400/os400sys.c:334:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    i = strlen(servname);
./curl-83.40.2/curl/packages/OS400/os400sys.c:522:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    bufSize = strlen(buffer);
./curl-83.40.2/curl/packages/OS400/os400sys.c:933:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = strlen(host);
./curl-83.40.2/curl/packages/OS400/os400sys.c:958:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    i = strlen(dn);
./curl-83.40.2/curl/packages/OS400/os400sys.c:968:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    i = strlen(passwd);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1004:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    i = strlen(base);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1015:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    i = strlen(filter);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1033:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        i = strlen(attrs[j]);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1074:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    int i = strlen(attr);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1117:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = strlen(cp);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1149:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = strlen(cp);
./curl-83.40.2/curl/packages/OS400/os400sys.c:1181:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  i = strlen(cp);
./curl-83.40.2/curl/packages/vms/curl_crtl_init.c:103:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    name_dsc.dsc$w_length = strlen(logname);
./curl-83.40.2/curl/packages/vms/curl_crtl_init.c:132:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    proc_table_dsc.dsc$w_length = strlen(proc_table);
./curl-83.40.2/curl/packages/vms/curl_crtl_init.c:137:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    logname_dsc.dsc$w_length = strlen(logname);
./curl-83.40.2/curl/packages/vms/curl_crtl_init.c:141:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    item_list[0].buflen = strlen(value);
./curl-83.40.2/curl/packages/vms/report_openssl_version.c:84:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      symbol_dsc.dsc$w_length = strlen(argv[2]);
./curl-83.40.2/curl/packages/vms/report_openssl_version.c:89:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      value_dsc.dsc$w_length = strlen(version);
./curl-83.40.2/curl/src/tool_cb_dbg.c:68:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(timebuf, sizeof(timebuf), "%02d:%02d:%02d.%06ld ",
./curl-83.40.2/curl/src/tool_cb_hdr.c:202:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    memmove(copy, p, strlen(p) + 1);
./curl-83.40.2/curl/src/tool_cb_hdr.c:213:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buffer, sizeof(buffer), "%s/%s", tdir, copy);
./curl-83.40.2/curl/src/tool_cb_prg.c:93:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(format, sizeof(format), "\r%%-%ds %%5.1f%%%%", barwidth);
./curl-83.40.2/curl/src/tool_cb_prg.c:130:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((endptr != colp) && (endptr == colp + strlen(colp)) && (num > 0))
./curl-83.40.2/curl/src/tool_cb_rea.c:42:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
  rc = read(in->fd, buffer, sz*nmemb);
./curl-83.40.2/curl/src/tool_dirhie.c:103:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  outlen = strlen(outfile);
./curl-83.40.2/curl/src/tool_dirhie.c:122:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      size_t dlen = strlen(dirbuildup);
./curl-83.40.2/curl/src/tool_dirhie.c:124:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(&dirbuildup[dlen], outlen - dlen, "%s%s", DIR_CHAR, tempdir);
./curl-83.40.2/curl/src/tool_dirhie.c:129:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
          snprintf(dirbuildup, outlen, "%s%s", DIR_CHAR, tempdir);
./curl-83.40.2/curl/src/tool_doswin.c:108:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(strlen(file_name) >= PATH_MAX)
./curl-83.40.2/curl/src/tool_doswin.c:216:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
  strncpy(fname, file_name, PATH_MAX-1);
./curl-83.40.2/curl/src/tool_doswin.c:220:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t blen = strlen(base);
./curl-83.40.2/curl/src/tool_doswin.c:222:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strlen(fname) >= PATH_MAX-1) {
./curl-83.40.2/curl/src/tool_formparse.c:179:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      char *end = ptr + strlen(ptr);
./curl-83.40.2/curl/src/tool_formparse.c:217:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            sep = (char *)type + strlen(type_major)+strlen(type_minor)+1;
./curl-83.40.2/curl/src/tool_formparse.c:217:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            sep = (char *)type + strlen(type_major)+strlen(type_minor)+1;
./curl-83.40.2/curl/src/tool_formparse.c:335:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(convert_to_network(contp, strlen(contp))) {
./curl-83.40.2/curl/src/tool_getparam.c:294:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t param_length = strlen(cert_parameter);
./curl-83.40.2/curl/src/tool_getparam.c:320:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(certname_place, param_place, span);
./curl-83.40.2/curl/src/tool_getparam.c:372:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(strlen(param_place) > 0) {
./curl-83.40.2/curl/src/tool_getparam.c:407:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t fnam = strlen(word);
./curl-83.40.2/curl/src/tool_getparam.c:555:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        else if(strlen(unit) > 1)
./curl-83.40.2/curl/src/tool_getparam.c:1159:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            size = strlen(postdata);
./curl-83.40.2/curl/src/tool_getparam.c:1176:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            size_t outlen = nlen + strlen(enc) + 2;
./curl-83.40.2/curl/src/tool_getparam.c:1183:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
              snprintf(n, outlen, "%.*s=%s", nlen, nextarg, enc);
./curl-83.40.2/curl/src/tool_getparam.c:1220:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            size = strlen(postdata);
./curl-83.40.2/curl/src/tool_getparam.c:1239:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          size = strlen(postdata);
./curl-83.40.2/curl/src/tool_getparam.c:1245:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(convert_to_network(postdata, strlen(postdata))) {
./curl-83.40.2/curl/src/tool_getparam.c:1339:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(!config->hostpubmd5 || strlen(config->hostpubmd5) != 32)
./curl-83.40.2/curl/src/tool_getparam.c:1623:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(buffer, sizeof(buffer), "%" CURL_FORMAT_CURL_OFF_T "-", off);
./curl-83.40.2/curl/src/tool_getpass.c:87:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                   prompt, strlen(prompt));
./curl-83.40.2/curl/src/tool_getpass.c:100:  [1] (buffer) getchar:
  Check buffer boundaries if used in a loop. 
#  define getch() getchar()
./curl-83.40.2/curl/src/tool_getpass.c:237:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
  nread = read(fd, password, buflen);
./curl-83.40.2/curl/src/tool_main.c:101:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strlen(env) >= CURL_MT_LOGFNAME_BUFSIZE)
./curl-83.40.2/curl/src/tool_main.c:115:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((endptr != env) && (endptr == env + strlen(env)) && (num > 0))
./curl-83.40.2/curl/src/tool_metalink.c:630:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    ssize_t len = read(fd, buf, sizeof(buf));
./curl-83.40.2/curl/src/tool_metalink.c:681:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t len = strlen(hex_digest);
./curl-83.40.2/curl/src/tool_metalink.c:904:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t media_type_len = strlen(media_type);
./curl-83.40.2/curl/src/tool_msgs.c:34:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
#define WARN_TEXTWIDTH (79 - (int)strlen(WARN_PREFIX))
./curl-83.40.2/curl/src/tool_operate.c:1657:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          if(strlen(url) > 78)
./curl-83.40.2/curl/src/tool_operhlp.c:82:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(!ptr || !strlen(++ptr)) {
./curl-83.40.2/curl/src/tool_operhlp.c:163:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(buffer, sizeof(buffer), "%s/%s", tdir, *filename);
./curl-83.40.2/curl/src/tool_panykey.c:41:  [1] (buffer) getchar:
  Check buffer boundaries if used in a loop. 
  getchar();
./curl-83.40.2/curl/src/tool_paramhlp.c:73:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      buflen = strlen(buffer);
./curl-83.40.2/curl/src/tool_paramhlp.c:141:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(str);
./curl-83.40.2/curl/src/tool_paramhlp.c:163:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((endptr != str) && (endptr == str + strlen(str))) {
./curl-83.40.2/curl/src/tool_paramhlp.c:205:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((endptr != str) && (endptr == str + strlen(str))) {
./curl-83.40.2/curl/src/tool_paramhlp.c:365:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if((endptr != str) && (endptr == str + strlen(str)))
./curl-83.40.2/curl/src/tool_paramhlp.c:393:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t userlen = strlen(*userpwd);
./curl-83.40.2/curl/src/tool_paramhlp.c:412:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    passwdlen = strlen(passwd);
./curl-83.40.2/curl/src/tool_parsecfg.c:64:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(strlen(home) < (sizeof(filebuffer) - strlen(CURLRC))) {
./curl-83.40.2/curl/src/tool_parsecfg.c:64:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(strlen(home) < (sizeof(filebuffer) - strlen(CURLRC))) {
./curl-83.40.2/curl/src/tool_parsecfg.c:65:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(filebuffer, sizeof(filebuffer),
./curl-83.40.2/curl/src/tool_parsecfg.c:90:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              remaining = sizeof(filebuffer) - strlen(filebuffer);
./curl-83.40.2/curl/src/tool_parsecfg.c:91:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              if(strlen(CURLRC) < remaining - 1) {
./curl-83.40.2/curl/src/tool_parsecfg.c:92:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
                snprintf(lastdirchar, remaining,
./curl-83.40.2/curl/src/tool_parsecfg.c:176:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        param = malloc(strlen(line) + 1); /* parameter */
./curl-83.40.2/curl/src/tool_parsecfg.c:348:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      size_t linelen = strlen(line);
./curl-83.40.2/curl/src/tool_parsecfg.c:349:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      ptr = realloc(line, linelen + strlen(buf) + 1);
./curl-83.40.2/curl/src/tool_setopt.c:196:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(str);
./curl-83.40.2/curl/src/tool_setopt.c:224:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(e, 4, "\\%03o", c);
./curl-83.40.2/curl/src/tool_setopt.c:284:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(preamble, sizeof(preamble),
./curl-83.40.2/curl/src/tool_setopt.c:295:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(preamble, sizeof(preamble), "%*s", strlen(preamble), "");
./curl-83.40.2/curl/src/tool_setopt.c:295:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        snprintf(preamble, sizeof(preamble), "%*s", strlen(preamble), "");
./curl-83.40.2/curl/src/tool_setopt.c:327:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(preamble, sizeof(preamble),
./curl-83.40.2/curl/src/tool_setopt.c:338:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(preamble, sizeof(preamble), "%*s", strlen(preamble), "");
./curl-83.40.2/curl/src/tool_setopt.c:338:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        snprintf(preamble, sizeof(preamble), "%*s", strlen(preamble), "");
./curl-83.40.2/curl/src/tool_setopt.c:495:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(buf, sizeof(buf), "%ldL", lval);
./curl-83.40.2/curl/src/tool_strdup.c:33:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  len = strlen(str);
./curl-83.40.2/curl/src/tool_urlglob.c:423:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  glob_buffer = malloc(strlen(url) + 1);
./curl-83.40.2/curl/src/tool_urlglob.c:432:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  glob_expand->urllen = strlen(url);
./curl-83.40.2/curl/src/tool_urlglob.c:443:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(text, sizeof(text), "%s in column %zu", glob_expand->error,
./curl-83.40.2/curl/src/tool_urlglob.c:543:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        len = strlen(pat->content.Set.elements[pat->content.Set.ptr_s]);
./curl-83.40.2/curl/src/tool_urlglob.c:544:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
        snprintf(buf, buflen, "%s",
./curl-83.40.2/curl/src/tool_urlglob.c:554:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      len = snprintf(buf, buflen, "%0*ld",
./curl-83.40.2/curl/src/tool_urlglob.c:589:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  allocsize = strlen(filename) + 1; /* make it at least one byte to store the
./curl-83.40.2/curl/src/tool_urlglob.c:619:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              strlen(pat->content.Set.elements[pat->content.Set.ptr_s]);
./curl-83.40.2/curl/src/tool_urlglob.c:629:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
          snprintf(numbuf, sizeof(numbuf), "%0*d",
./curl-83.40.2/curl/src/tool_urlglob.c:633:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
          appendlen = strlen(numbuf);
./curl-83.40.2/curl/src/tool_xattr.c:66:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      err = fsetxattr(fd, mappings[i].attr, value, strlen(value), 0, 0);
./curl-83.40.2/curl/src/tool_xattr.c:68:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      err = fsetxattr(fd, mappings[i].attr, value, strlen(value), 0);
./curl-83.40.2/curl/src/tool_xattr.c:71:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                           strlen(value));
./curl-83.40.2/curl/tests/libtest/first.c:91:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(strlen(env) >= CURL_MT_LOGFNAME_BUFSIZE)
./curl-83.40.2/curl/tests/libtest/first.c:105:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((endptr != env) && (endptr == env + strlen(env)) && (num > 0))
./curl-83.40.2/curl/tests/libtest/first.c:123:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(p, 4, "%02x ", buffer[i]);
./curl-83.40.2/curl/tests/libtest/lib1515.c:124:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(dns_entry, sizeof(dns_entry), "testserver.example.com:%s:%s", port, address);
./curl-83.40.2/curl/tests/libtest/lib1515.c:133:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(target_url, sizeof(target_url), "http://testserver.example.com:%s%s%04d", port, path, i);
./curl-83.40.2/curl/tests/libtest/lib1520.c:62:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1525.c:38:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if (amount < strlen(data)) {
./curl-83.40.2/curl/tests/libtest/lib1525.c:39:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    return strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1525.c:42:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  memcpy(ptr, data, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1525.c:43:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  return strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1525.c:84:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  test_setopt(curl, CURLOPT_INFILESIZE, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1526.c:37:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if (amount < strlen(data)) {
./curl-83.40.2/curl/tests/libtest/lib1526.c:38:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    return strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1526.c:41:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  memcpy(ptr, data, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1526.c:42:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  return strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1526.c:87:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  test_setopt(curl, CURLOPT_INFILESIZE, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1527.c:37:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if (amount < strlen(data)) {
./curl-83.40.2/curl/tests/libtest/lib1527.c:38:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    return strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1527.c:41:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  memcpy(ptr, data, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1527.c:42:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  return strlen(data);
./curl-83.40.2/curl/tests/libtest/lib1527.c:85:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  test_setopt(curl, CURLOPT_INFILESIZE, strlen(data));
./curl-83.40.2/curl/tests/libtest/lib1529.c:32:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(bURL, sizeof(bURL), "%s HTTP/1.1\r\nGET http://1529.com/1529", URL);
./curl-83.40.2/curl/tests/libtest/lib508.c:58:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  pooh.sizeleft = strlen(data);
./curl-83.40.2/curl/tests/libtest/lib510.c:50:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/tests/libtest/lib539.c:61:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
   newURL = malloc(strlen(URL) + 3);
./curl-83.40.2/curl/tests/libtest/lib547.c:55:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(size * nmemb > strlen(UPLOADTHIS)) {
./curl-83.40.2/curl/tests/libtest/lib547.c:58:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    return strlen(UPLOADTHIS);
./curl-83.40.2/curl/tests/libtest/lib547.c:112:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  test_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(UPLOADTHIS));
./curl-83.40.2/curl/tests/libtest/lib554.c:84:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  pooh.sizeleft = strlen(data);
./curl-83.40.2/curl/tests/libtest/lib554.c:102:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  pooh2.sizeleft = strlen(data);
./curl-83.40.2/curl/tests/libtest/lib555.c:54:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  if(size * nmemb > strlen(UPLOADTHIS)) {
./curl-83.40.2/curl/tests/libtest/lib555.c:57:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    return strlen(UPLOADTHIS);
./curl-83.40.2/curl/tests/libtest/lib555.c:100:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(UPLOADTHIS));
./curl-83.40.2/curl/tests/libtest/lib556.c:75:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    res = curl_easy_send(curl, request, strlen(request), &iolen);
./curl-83.40.2/curl/tests/libtest/lib557.c:206:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
               strlen(us_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib557.c:376:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              strlen(ss_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib557.c:525:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
               strlen(ui_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib557.c:753:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              strlen(si_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib557.c:902:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
               strlen(ul_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib557.c:1130:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              strlen(sl_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib557.c:1358:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
               strlen(co_test[i].expected))) {
./curl-83.40.2/curl/tests/libtest/lib579.c:79:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    size_t len = strlen(data);
./curl-83.40.2/curl/tests/libtest/lib582.c:41:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
  struct Sockets read, write;
./curl-83.40.2/curl/tests/libtest/lib582.c:114:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    addFd(&sockets->read, s, "read");
./curl-83.40.2/curl/tests/libtest/lib582.c:120:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    removeFd(&sockets->read, s, 1);
./curl-83.40.2/curl/tests/libtest/lib582.c:311:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    updateFdSet(&sockets.read, &readSet, &maxFd);
./curl-83.40.2/curl/tests/libtest/lib582.c:329:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    checkFdSet(m, &sockets.read, &readSet, CURL_CSELECT_IN, "read");
./curl-83.40.2/curl/tests/libtest/lib582.c:360:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
  free(sockets.read.sockets);
./curl-83.40.2/curl/tests/libtest/libauthretry.c:35:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  char* full_url = malloc(strlen(url) + 4 + 1);
./curl-83.40.2/curl/tests/libtest/libntlmconnect.c:106:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  char* full_url = malloc(strlen(url) + 4 + 1);
./curl-83.40.2/curl/tests/libtest/sethostname.c:34:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(name, force_hostname, namelen);
./curl-83.40.2/curl/tests/libtest/testtrace.c:109:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(timebuf, sizeof(timebuf), "%02d:%02d:%02d.%06ld ",
./curl-83.40.2/curl/tests/server/fake_ntlm.c:65:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    inlength = strlen(inbuf);
./curl-83.40.2/curl/tests/server/fake_ntlm.c:169:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if((endptr != env + strlen(env)) || (lnum < 1L)) {
./curl-83.40.2/curl/tests/server/fake_ntlm.c:243:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    else if(strncmp(buf, type3_input, strlen(type3_input)) == 0) {
./curl-83.40.2/curl/tests/server/getpart.c:106:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    length = offset + strlen(*buffer + offset);
./curl-83.40.2/curl/tests/server/getpart.c:156:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  size_t src_len = strlen(src_buf);
./curl-83.40.2/curl/tests/server/rtspd.c:346:  [1] (buffer) sscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
     sscanf(line,
./curl-83.40.2/curl/tests/server/rtspd.c:377:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if((strlen(doc) + strlen(request)) < 200)
./curl-83.40.2/curl/tests/server/rtspd.c:377:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if((strlen(doc) + strlen(request)) < 200)
./curl-83.40.2/curl/tests/server/rtspd.c:451:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            if(!strncmp(CMD_AUTH_REQUIRED, ptr, strlen(CMD_AUTH_REQUIRED))) {
./curl-83.40.2/curl/tests/server/rtspd.c:455:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            else if(!strncmp(CMD_IDLE, ptr, strlen(CMD_IDLE))) {
./curl-83.40.2/curl/tests/server/rtspd.c:460:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
            else if(!strncmp(CMD_STREAM, ptr, strlen(CMD_STREAM))) {
./curl-83.40.2/curl/tests/server/rtspd.c:571:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    req->checkindex += (end - line) + strlen(END_OF_HEADERS);
./curl-83.40.2/curl/tests/server/rtspd.c:615:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                            strlen("Transfer-Encoding: chunked"))) {
./curl-83.40.2/curl/tests/server/rtspd.c:679:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
     req->reqbuf + req->offset > end + strlen(END_OF_HEADERS) &&
./curl-83.40.2/curl/tests/server/rtspd.c:680:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
     (!strncmp(req->reqbuf, "GET", strlen("GET")) ||
./curl-83.40.2/curl/tests/server/rtspd.c:681:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      !strncmp(req->reqbuf, "HEAD", strlen("HEAD")))) {
./curl-83.40.2/curl/tests/server/rtspd.c:684:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    req->checkindex = (end - req->reqbuf) + strlen(END_OF_HEADERS);
./curl-83.40.2/curl/tests/server/rtspd.c:696:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    req->checkindex += (end - line) + strlen(END_OF_HEADERS);
./curl-83.40.2/curl/tests/server/rtspd.c:708:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(req->cl <= req->offset - (end - req->reqbuf) - strlen(END_OF_HEADERS))
./curl-83.40.2/curl/tests/server/rtspd.c:910:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    count = strlen(STREAMTHIS);
./curl-83.40.2/curl/tests/server/rtspd.c:941:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      msglen = strlen(msgbuf);
./curl-83.40.2/curl/tests/server/rtspd.c:968:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    count = strlen(buffer);
./curl-83.40.2/curl/tests/server/rtspd.c:1128:  [1] (buffer) sscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
      if(2 == sscanf(ptr, "%31s %d", command, &num)) {
./curl-83.40.2/curl/tests/server/rtspd.c:1225:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if((endptr != argv[arg] + strlen(argv[arg])) ||
./curl-83.40.2/curl/tests/server/sockfilt.c:284:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    return read(fd, buf, count);
./curl-83.40.2/curl/tests/server/sockfilt.c:300:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
#undef  read
./curl-83.40.2/curl/tests/server/sockfilt.c:301:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
#define read(a,b,c) read_wincon(a,b,c)
./curl-83.40.2/curl/tests/server/sockfilt.c:353:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
    rc = read(filedes, (unsigned char *)buffer + nread, nbytes - nread);
./curl-83.40.2/curl/tests/server/sockfilt.c:1041:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      buffer_len = (ssize_t)strlen((char *)buffer);
./curl-83.40.2/curl/tests/server/sockfilt.c:1042:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(data, sizeof(data), "PORT\n%04zx\n", buffer_len);
./curl-83.40.2/curl/tests/server/sockfilt.c:1135:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
      snprintf(data, sizeof(data), "DATA\n%04zx\n", nread_socket);
./curl-83.40.2/curl/tests/server/sockfilt.c:1371:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if((endptr != argv[arg] + strlen(argv[arg])) ||
./curl-83.40.2/curl/tests/server/sockfilt.c:1388:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if((endptr != argv[arg] + strlen(argv[arg])) ||
./curl-83.40.2/curl/tests/server/sws.c:386:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if(!strncmp(CMD_AUTH_REQUIRED, cmd, strlen(CMD_AUTH_REQUIRED))) {
./curl-83.40.2/curl/tests/server/sws.c:390:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      else if(!strncmp(CMD_IDLE, cmd, strlen(CMD_IDLE))) {
./curl-83.40.2/curl/tests/server/sws.c:395:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      else if(!strncmp(CMD_STREAM, cmd, strlen(CMD_STREAM))) {
./curl-83.40.2/curl/tests/server/sws.c:400:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                       strlen(CMD_CONNECTIONMONITOR))) {
./curl-83.40.2/curl/tests/server/sws.c:404:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      else if(!strncmp(CMD_UPGRADE, cmd, strlen(CMD_UPGRADE))) {
./curl-83.40.2/curl/tests/server/sws.c:493:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if((strlen(doc) + strlen(request)) < 400)
./curl-83.40.2/curl/tests/server/sws.c:493:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      if((strlen(doc) + strlen(request)) < 400)
./curl-83.40.2/curl/tests/server/sws.c:680:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    req->checkindex += (end - line) + strlen(end_of_headers);
./curl-83.40.2/curl/tests/server/sws.c:724:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
                            strlen("Transfer-Encoding: chunked"))) {
./curl-83.40.2/curl/tests/server/sws.c:789:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
     req->reqbuf + req->offset > end + strlen(end_of_headers) &&
./curl-83.40.2/curl/tests/server/sws.c:791:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
     (!strncmp(req->reqbuf, "GET", strlen("GET")) ||
./curl-83.40.2/curl/tests/server/sws.c:792:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      !strncmp(req->reqbuf, "HEAD", strlen("HEAD")))) {
./curl-83.40.2/curl/tests/server/sws.c:795:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    req->checkindex = (end - req->reqbuf) + strlen(end_of_headers);
./curl-83.40.2/curl/tests/server/sws.c:807:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    req->checkindex += (end - line) + strlen(end_of_headers);
./curl-83.40.2/curl/tests/server/sws.c:827:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    if(req->cl <= req->offset - (end - req->reqbuf) - strlen(end_of_headers))
./curl-83.40.2/curl/tests/server/sws.c:1049:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    count = strlen(STREAMTHIS);
./curl-83.40.2/curl/tests/server/sws.c:1080:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
      msglen = strlen(msgbuf);
./curl-83.40.2/curl/tests/server/sws.c:1095:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    count = strlen(buffer);
./curl-83.40.2/curl/tests/server/sws.c:1248:  [1] (buffer) sscanf:
  it's unclear if the %s limit in the format string is small enough.
  Check that the limit is sufficiently small, or use a different input
  function. 
      if(2 == sscanf(ptr, "%31s %d", command, &num)) {
./curl-83.40.2/curl/tests/server/sws.c:2011:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if(strlen(unix_socket) >= sizeof(me.sau.sun_path)) {
./curl-83.40.2/curl/tests/server/sws.c:2028:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if((endptr != argv[arg] + strlen(argv[arg])) ||
./curl-83.40.2/curl/tests/server/sws.c:2073:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(port_str, sizeof(port_str), "port %hu", port);
./curl-83.40.2/curl/tests/server/sws.c:2132:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
    strncpy(me.sau.sun_path, unix_socket, sizeof(me.sau.sun_path));
./curl-83.40.2/curl/tests/server/sws.c:2299:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
              storerequest((char *)keepopen, strlen(keepopen));
./curl-83.40.2/curl/tests/server/tftpd.c:567:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
    snprintf(outfile, sizeof(outfile), "log/upload.%ld", test->testno);
./curl-83.40.2/curl/tests/server/tftpd.c:715:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
        if((endptr != argv[arg] + strlen(argv[arg])) ||
./curl-83.40.2/curl/tests/server/tftpd.c:1390:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  length = (int)strlen(pe->e_msg);
./curl-83.40.2/curl/tests/server/util.c:115:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
  snprintf(timebuf, sizeof(timebuf), "%02d:%02d:%02d.%06ld",
./curl-83.40.2/curl/tests/server/util.c:145:  [1] (port) snprintf:
  On some very old systems, snprintf is incorrectly implemented and
  permits buffer overflows; there are also incompatible standard definitions
  of it. Check it during installation, or use something else. 
     snprintf(buf, sizeof(buf), "Unknown error %lu (%#lx)", err, err);
./curl-83.40.2/curl/tests/unit/unit1304.c:52:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
  memcpy(filename, filename1, strlen(filename1));
./curl-83.40.2/curl/tests/unit/unit1305.c:130:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    key_len = strlen(data_key);
./curl-83.40.2/curl/tests/unit/unit1396.c:101:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
    outlen = (int)strlen(out);

Hits = 1753
Lines analyzed = 176920 in 9.41 seconds (19854 lines/second)
Physical Source Lines of Code (SLOC) = 114203
Hits@level = [0]   0 [1] 713 [2] 795 [3]  42 [4] 203 [5]   0
Hits@level+ = [0+] 1753 [1+] 1753 [2+] 1040 [3+] 245 [4+] 203 [5+]   0
Hits/KSLOC@level+ = [0+] 15.3499 [1+] 15.3499 [2+] 9.10659 [3+] 2.1453 [4+] 1.77754 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
